
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b64  08002b64  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002b64  08002b64  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b64  08002b64  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000090  08002bfc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002bfc  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089f8  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015e2  00000000  00000000  00028ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  0002a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  0002a770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003c5a  00000000  00000000  0002ad88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c04  00000000  00000000  0002e9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000547ce  00000000  00000000  000345e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00088db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000239c  00000000  00000000  00088e30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a30 	.word	0x08002a30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08002a30 	.word	0x08002a30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000270:	b480      	push	{r7}
 8000272:	b08b      	sub	sp, #44	; 0x2c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000298:	4b93      	ldr	r3, [pc, #588]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	2b04      	cmp	r3, #4
 80002a6:	d007      	beq.n	80002b8 <RCC_GetClocksFreq+0x48>
 80002a8:	2b08      	cmp	r3, #8
 80002aa:	d009      	beq.n	80002c0 <RCC_GetClocksFreq+0x50>
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d130      	bne.n	8000312 <RCC_GetClocksFreq+0xa2>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a8e      	ldr	r2, [pc, #568]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 80002b4:	601a      	str	r2, [r3, #0]
      break;
 80002b6:	e030      	b.n	800031a <RCC_GetClocksFreq+0xaa>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a8c      	ldr	r2, [pc, #560]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 80002bc:	601a      	str	r2, [r3, #0]
      break;
 80002be:	e02c      	b.n	800031a <RCC_GetClocksFreq+0xaa>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002c0:	4b89      	ldr	r3, [pc, #548]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002c8:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002ca:	4b87      	ldr	r3, [pc, #540]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002d2:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	0c9b      	lsrs	r3, r3, #18
 80002d8:	3302      	adds	r3, #2
 80002da:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d105      	bne.n	80002ee <RCC_GetClocksFreq+0x7e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	4a82      	ldr	r2, [pc, #520]	; (80004f0 <RCC_GetClocksFreq+0x280>)
 80002e6:	fb02 f303 	mul.w	r3, r2, r3
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24
 80002ec:	e00d      	b.n	800030a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002ee:	4b7e      	ldr	r3, [pc, #504]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80002f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	3301      	adds	r3, #1
 80002f8:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80002fa:	4a7c      	ldr	r2, [pc, #496]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8000302:	69fb      	ldr	r3, [r7, #28]
 8000304:	fb02 f303 	mul.w	r3, r2, r3
 8000308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800030e:	601a      	str	r2, [r3, #0]
      break;
 8000310:	e003      	b.n	800031a <RCC_GetClocksFreq+0xaa>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a75      	ldr	r2, [pc, #468]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000316:	601a      	str	r2, [r3, #0]
      break;
 8000318:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800031a:	4b73      	ldr	r3, [pc, #460]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000322:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000324:	6a3b      	ldr	r3, [r7, #32]
 8000326:	091b      	lsrs	r3, r3, #4
 8000328:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800032a:	4a72      	ldr	r2, [pc, #456]	; (80004f4 <RCC_GetClocksFreq+0x284>)
 800032c:	6a3b      	ldr	r3, [r7, #32]
 800032e:	4413      	add	r3, r2
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	40da      	lsrs	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000342:	4b69      	ldr	r3, [pc, #420]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800034a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800034c:	6a3b      	ldr	r3, [r7, #32]
 800034e:	0a1b      	lsrs	r3, r3, #8
 8000350:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000352:	4a68      	ldr	r2, [pc, #416]	; (80004f4 <RCC_GetClocksFreq+0x284>)
 8000354:	6a3b      	ldr	r3, [r7, #32]
 8000356:	4413      	add	r3, r2
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b2db      	uxtb	r3, r3
 800035c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	685a      	ldr	r2, [r3, #4]
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	40da      	lsrs	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800036a:	4b5f      	ldr	r3, [pc, #380]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000372:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000374:	6a3b      	ldr	r3, [r7, #32]
 8000376:	0adb      	lsrs	r3, r3, #11
 8000378:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800037a:	4a5e      	ldr	r2, [pc, #376]	; (80004f4 <RCC_GetClocksFreq+0x284>)
 800037c:	6a3b      	ldr	r3, [r7, #32]
 800037e:	4413      	add	r3, r2
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	685a      	ldr	r2, [r3, #4]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	40da      	lsrs	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000392:	4b55      	ldr	r3, [pc, #340]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 8000394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000396:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800039a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800039c:	6a3b      	ldr	r3, [r7, #32]
 800039e:	091b      	lsrs	r3, r3, #4
 80003a0:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003a2:	4a55      	ldr	r2, [pc, #340]	; (80004f8 <RCC_GetClocksFreq+0x288>)
 80003a4:	6a3b      	ldr	r3, [r7, #32]
 80003a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	f003 0310 	and.w	r3, r3, #16
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d006      	beq.n	80003c6 <RCC_GetClocksFreq+0x156>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	e003      	b.n	80003ce <RCC_GetClocksFreq+0x15e>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003ce:	4b46      	ldr	r3, [pc, #280]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80003d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d2:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003d6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003d8:	6a3b      	ldr	r3, [r7, #32]
 80003da:	0a5b      	lsrs	r3, r3, #9
 80003dc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003de:	4a46      	ldr	r2, [pc, #280]	; (80004f8 <RCC_GetClocksFreq+0x288>)
 80003e0:	6a3b      	ldr	r3, [r7, #32]
 80003e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	f003 0310 	and.w	r3, r3, #16
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d006      	beq.n	8000402 <RCC_GetClocksFreq+0x192>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80003f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	e003      	b.n	800040a <RCC_GetClocksFreq+0x19a>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800040a:	4b37      	ldr	r3, [pc, #220]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	f003 0310 	and.w	r3, r3, #16
 8000412:	2b10      	cmp	r3, #16
 8000414:	d003      	beq.n	800041e <RCC_GetClocksFreq+0x1ae>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a34      	ldr	r2, [pc, #208]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 800041a:	619a      	str	r2, [r3, #24]
 800041c:	e003      	b.n	8000426 <RCC_GetClocksFreq+0x1b6>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000426:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0320 	and.w	r3, r3, #32
 800042e:	2b20      	cmp	r3, #32
 8000430:	d003      	beq.n	800043a <RCC_GetClocksFreq+0x1ca>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <RCC_GetClocksFreq+0x27c>)
 8000436:	61da      	str	r2, [r3, #28]
 8000438:	e003      	b.n	8000442 <RCC_GetClocksFreq+0x1d2>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000442:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800044a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800044e:	d10d      	bne.n	800046c <RCC_GetClocksFreq+0x1fc>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000456:	429a      	cmp	r2, r3
 8000458:	d108      	bne.n	800046c <RCC_GetClocksFreq+0x1fc>
  && (apb2presc == ahbpresc)) 
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	429a      	cmp	r2, r3
 8000460:	d104      	bne.n	800046c <RCC_GetClocksFreq+0x1fc>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000464:	005a      	lsls	r2, r3, #1
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	621a      	str	r2, [r3, #32]
 800046a:	e003      	b.n	8000474 <RCC_GetClocksFreq+0x204>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68da      	ldr	r2, [r3, #12]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800047c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000480:	d10d      	bne.n	800049e <RCC_GetClocksFreq+0x22e>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000488:	429a      	cmp	r2, r3
 800048a:	d108      	bne.n	800049e <RCC_GetClocksFreq+0x22e>
  && (apb2presc == ahbpresc))
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	429a      	cmp	r2, r3
 8000492:	d104      	bne.n	800049e <RCC_GetClocksFreq+0x22e>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000496:	005a      	lsls	r2, r3, #1
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	625a      	str	r2, [r3, #36]	; 0x24
 800049c:	e003      	b.n	80004a6 <RCC_GetClocksFreq+0x236>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	68da      	ldr	r2, [r3, #12]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	f003 0303 	and.w	r3, r3, #3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d104      	bne.n	80004bc <RCC_GetClocksFreq+0x24c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	68da      	ldr	r2, [r3, #12]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	629a      	str	r2, [r3, #40]	; 0x28
 80004ba:	e028      	b.n	800050e <RCC_GetClocksFreq+0x29e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	f003 0303 	and.w	r3, r3, #3
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d104      	bne.n	80004d2 <RCC_GetClocksFreq+0x262>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
 80004d0:	e01d      	b.n	800050e <RCC_GetClocksFreq+0x29e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <RCC_GetClocksFreq+0x278>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	f003 0303 	and.w	r3, r3, #3
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d10e      	bne.n	80004fc <RCC_GetClocksFreq+0x28c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004e4:	629a      	str	r2, [r3, #40]	; 0x28
 80004e6:	e012      	b.n	800050e <RCC_GetClocksFreq+0x29e>
 80004e8:	40021000 	.word	0x40021000
 80004ec:	007a1200 	.word	0x007a1200
 80004f0:	003d0900 	.word	0x003d0900
 80004f4:	20000000 	.word	0x20000000
 80004f8:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80004fc:	4b61      	ldr	r3, [pc, #388]	; (8000684 <RCC_GetClocksFreq+0x414>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000500:	f003 0303 	and.w	r3, r3, #3
 8000504:	2b03      	cmp	r3, #3
 8000506:	d102      	bne.n	800050e <RCC_GetClocksFreq+0x29e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a5f      	ldr	r2, [pc, #380]	; (8000688 <RCC_GetClocksFreq+0x418>)
 800050c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800050e:	4b5d      	ldr	r3, [pc, #372]	; (8000684 <RCC_GetClocksFreq+0x414>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000516:	2b00      	cmp	r3, #0
 8000518:	d104      	bne.n	8000524 <RCC_GetClocksFreq+0x2b4>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	689a      	ldr	r2, [r3, #8]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	62da      	str	r2, [r3, #44]	; 0x2c
 8000522:	e021      	b.n	8000568 <RCC_GetClocksFreq+0x2f8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000524:	4b57      	ldr	r3, [pc, #348]	; (8000684 <RCC_GetClocksFreq+0x414>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800052c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000530:	d104      	bne.n	800053c <RCC_GetClocksFreq+0x2cc>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	62da      	str	r2, [r3, #44]	; 0x2c
 800053a:	e015      	b.n	8000568 <RCC_GetClocksFreq+0x2f8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800053c:	4b51      	ldr	r3, [pc, #324]	; (8000684 <RCC_GetClocksFreq+0x414>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000548:	d104      	bne.n	8000554 <RCC_GetClocksFreq+0x2e4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
 8000552:	e009      	b.n	8000568 <RCC_GetClocksFreq+0x2f8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000554:	4b4b      	ldr	r3, [pc, #300]	; (8000684 <RCC_GetClocksFreq+0x414>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800055c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000560:	d102      	bne.n	8000568 <RCC_GetClocksFreq+0x2f8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a48      	ldr	r2, [pc, #288]	; (8000688 <RCC_GetClocksFreq+0x418>)
 8000566:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000568:	4b46      	ldr	r3, [pc, #280]	; (8000684 <RCC_GetClocksFreq+0x414>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000570:	2b00      	cmp	r3, #0
 8000572:	d104      	bne.n	800057e <RCC_GetClocksFreq+0x30e>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	631a      	str	r2, [r3, #48]	; 0x30
 800057c:	e021      	b.n	80005c2 <RCC_GetClocksFreq+0x352>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800057e:	4b41      	ldr	r3, [pc, #260]	; (8000684 <RCC_GetClocksFreq+0x414>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800058a:	d104      	bne.n	8000596 <RCC_GetClocksFreq+0x326>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	631a      	str	r2, [r3, #48]	; 0x30
 8000594:	e015      	b.n	80005c2 <RCC_GetClocksFreq+0x352>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000596:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <RCC_GetClocksFreq+0x414>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800059e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005a2:	d104      	bne.n	80005ae <RCC_GetClocksFreq+0x33e>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005aa:	631a      	str	r2, [r3, #48]	; 0x30
 80005ac:	e009      	b.n	80005c2 <RCC_GetClocksFreq+0x352>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005ae:	4b35      	ldr	r3, [pc, #212]	; (8000684 <RCC_GetClocksFreq+0x414>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005ba:	d102      	bne.n	80005c2 <RCC_GetClocksFreq+0x352>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a32      	ldr	r2, [pc, #200]	; (8000688 <RCC_GetClocksFreq+0x418>)
 80005c0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <RCC_GetClocksFreq+0x414>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d104      	bne.n	80005d8 <RCC_GetClocksFreq+0x368>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
 80005d6:	e021      	b.n	800061c <RCC_GetClocksFreq+0x3ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <RCC_GetClocksFreq+0x414>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80005e4:	d104      	bne.n	80005f0 <RCC_GetClocksFreq+0x380>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
 80005ee:	e015      	b.n	800061c <RCC_GetClocksFreq+0x3ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <RCC_GetClocksFreq+0x414>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80005fc:	d104      	bne.n	8000608 <RCC_GetClocksFreq+0x398>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
 8000606:	e009      	b.n	800061c <RCC_GetClocksFreq+0x3ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <RCC_GetClocksFreq+0x414>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000610:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000614:	d102      	bne.n	800061c <RCC_GetClocksFreq+0x3ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <RCC_GetClocksFreq+0x418>)
 800061a:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <RCC_GetClocksFreq+0x414>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000624:	2b00      	cmp	r3, #0
 8000626:	d104      	bne.n	8000632 <RCC_GetClocksFreq+0x3c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000630:	e021      	b.n	8000676 <RCC_GetClocksFreq+0x406>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <RCC_GetClocksFreq+0x414>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800063a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800063e:	d104      	bne.n	800064a <RCC_GetClocksFreq+0x3da>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000648:	e015      	b.n	8000676 <RCC_GetClocksFreq+0x406>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <RCC_GetClocksFreq+0x414>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000656:	d104      	bne.n	8000662 <RCC_GetClocksFreq+0x3f2>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800065e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000660:	e009      	b.n	8000676 <RCC_GetClocksFreq+0x406>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <RCC_GetClocksFreq+0x414>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800066a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800066e:	d102      	bne.n	8000676 <RCC_GetClocksFreq+0x406>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <RCC_GetClocksFreq+0x418>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000676:	bf00      	nop
 8000678:	372c      	adds	r7, #44	; 0x2c
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	007a1200 	.word	0x007a1200

0800068c <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	330c      	adds	r3, #12
 80006a4:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	78fa      	ldrb	r2, [r7, #3]
 80006aa:	701a      	strb	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	891b      	ldrh	r3, [r3, #8]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	4013      	ands	r3, r2
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80006d8:	2301      	movs	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e001      	b.n	80006e2 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006fc:	887b      	ldrh	r3, [r7, #2]
 80006fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000702:	b29a      	uxth	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000714:	b480      	push	{r7}
 8000716:	b089      	sub	sp, #36	; 0x24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	4613      	mov	r3, r2
 8000720:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b29b      	uxth	r3, r3
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000746:	2201      	movs	r2, #1
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d103      	bne.n	800075e <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	e005      	b.n	800076a <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	2b03      	cmp	r3, #3
 8000762:	d102      	bne.n	800076a <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	3308      	adds	r3, #8
 8000768:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d006      	beq.n	800077e <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	6819      	ldr	r1, [r3, #0]
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	430a      	orrs	r2, r1
 800077a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800077c:	e006      	b.n	800078c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	6819      	ldr	r1, [r3, #0]
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	43da      	mvns	r2, r3
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	400a      	ands	r2, r1
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	3724      	adds	r7, #36	; 0x24
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	69da      	ldr	r2, [r3, #28]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	4013      	ands	r3, r2
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80007b2:	2301      	movs	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e001      	b.n	80007bc <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b087      	sub	sp, #28
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80007f4:	2201      	movs	r2, #1
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d105      	bne.n	8000810 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	4013      	ands	r3, r2
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e00d      	b.n	800082c <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d105      	bne.n	8000822 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	e004      	b.n	800082c <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4013      	ands	r3, r2
 800082a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	0c1b      	lsrs	r3, r3, #16
 8000830:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000832:	2201      	movs	r2, #1
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	4013      	ands	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d005      	beq.n	8000858 <USART_GetITStatus+0x8e>
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000852:	2301      	movs	r3, #1
 8000854:	74fb      	strb	r3, [r7, #19]
 8000856:	e001      	b.n	800085c <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800085c:	7cfb      	ldrb	r3, [r7, #19]
}
 800085e:	4618      	mov	r0, r3
 8000860:	371c      	adds	r7, #28
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 031f 	and.w	r3, r3, #31
 800087c:	2201      	movs	r2, #1
 800087e:	fa02 f103 	lsl.w	r1, r2, r3
 8000882:	4a06      	ldr	r2, [pc, #24]	; (800089c <NVIC_EnableIRQ+0x30>)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	095b      	lsrs	r3, r3, #5
 800088a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <uart_put_char+0x30>)
 80008b2:	f7ff ff1d 	bl	80006f0 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80008b6:	bf00      	nop
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <uart_put_char+0x30>)
 80008bc:	f7ff ff6c 	bl	8000798 <USART_GetFlagStatus>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0f8      	beq.n	80008b8 <uart_put_char+0x18>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40004400 	.word	0x40004400

080008d4 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e012      	b.n	800090e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b0a      	cmp	r3, #10
 80008f2:	d102      	bne.n	80008fa <_write_r+0x26>
            uart_put_char('\r');
 80008f4:	200d      	movs	r0, #13
 80008f6:	f7ff ffd3 	bl	80008a0 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ffcc 	bl	80008a0 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	429a      	cmp	r2, r3
 8000914:	dbe8      	blt.n	80008e8 <_write_r+0x14>
    }

    return len;
 8000916:	683b      	ldr	r3, [r7, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000924:	4915      	ldr	r1, [pc, #84]	; (800097c <USART2_IRQHandler+0x5c>)
 8000926:	4816      	ldr	r0, [pc, #88]	; (8000980 <USART2_IRQHandler+0x60>)
 8000928:	f7ff ff4f 	bl	80007ca <USART_GetITStatus>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d021      	beq.n	8000976 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <USART2_IRQHandler+0x60>)
 8000934:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000936:	b299      	uxth	r1, r3
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <USART2_IRQHandler+0x64>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	b2d0      	uxtb	r0, r2
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <USART2_IRQHandler+0x64>)
 8000944:	7010      	strb	r0, [r2, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	b2c9      	uxtb	r1, r1
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <USART2_IRQHandler+0x68>)
 800094c:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <USART2_IRQHandler+0x6c>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2bff      	cmp	r3, #255	; 0xff
 8000956:	d107      	bne.n	8000968 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <USART2_IRQHandler+0x70>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <USART2_IRQHandler+0x70>)
 8000964:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000966:	e006      	b.n	8000976 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <USART2_IRQHandler+0x6c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	3301      	adds	r3, #1
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <USART2_IRQHandler+0x6c>)
 8000974:	701a      	strb	r2, [r3, #0]
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	00050105 	.word	0x00050105
 8000980:	40004400 	.word	0x40004400
 8000984:	200001ac 	.word	0x200001ac
 8000988:	200000ac 	.word	0x200000ac
 800098c:	200001ae 	.word	0x200001ae
 8000990:	200001ad 	.word	0x200001ad

08000994 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b094      	sub	sp, #80	; 0x50
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 800099c:	4b86      	ldr	r3, [pc, #536]	; (8000bb8 <uart_init+0x224>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 f98b 	bl	8001cc0 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80009aa:	4b83      	ldr	r3, [pc, #524]	; (8000bb8 <uart_init+0x224>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f984 	bl	8001cc0 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80009b8:	4b80      	ldr	r3, [pc, #512]	; (8000bbc <uart_init+0x228>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	4a7f      	ldr	r2, [pc, #508]	; (8000bbc <uart_init+0x228>)
 80009be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c2:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80009c4:	4b7d      	ldr	r3, [pc, #500]	; (8000bbc <uart_init+0x228>)
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	4a7c      	ldr	r2, [pc, #496]	; (8000bbc <uart_init+0x228>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80009d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009d4:	6a1b      	ldr	r3, [r3, #32]
 80009d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009de:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80009e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009e4:	6a1b      	ldr	r3, [r3, #32]
 80009e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80009ee:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80009f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f4:	6a1b      	ldr	r3, [r3, #32]
 80009f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80009fe:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000a00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a04:	6a1b      	ldr	r3, [r3, #32]
 8000a06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a0a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a0e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000a10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a1e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000a20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a2a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a2e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a34:	889b      	ldrh	r3, [r3, #4]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a3c:	f023 030c 	bic.w	r3, r3, #12
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000a44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a4c:	8892      	ldrh	r2, [r2, #4]
 8000a4e:	b292      	uxth	r2, r2
 8000a50:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a60:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a6c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a70:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a80:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a8c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a90:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a92:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <uart_init+0x22c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a4a      	ldr	r2, [pc, #296]	; (8000bc0 <uart_init+0x22c>)
 8000a98:	f023 0301 	bic.w	r3, r3, #1
 8000a9c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000a9e:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <uart_init+0x22c>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	4a47      	ldr	r2, [pc, #284]	; (8000bc0 <uart_init+0x22c>)
 8000aa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aa8:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000aaa:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <uart_init+0x22c>)
 8000aac:	4a44      	ldr	r2, [pc, #272]	; (8000bc0 <uart_init+0x22c>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000ab2:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <uart_init+0x22c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a42      	ldr	r2, [pc, #264]	; (8000bc0 <uart_init+0x22c>)
 8000ab8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000abc:	f023 030c 	bic.w	r3, r3, #12
 8000ac0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <uart_init+0x22c>)
 8000ac4:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <uart_init+0x22c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000aca:	4b3d      	ldr	r3, [pc, #244]	; (8000bc0 <uart_init+0x22c>)
 8000acc:	4a3c      	ldr	r2, [pc, #240]	; (8000bc0 <uart_init+0x22c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <uart_init+0x22c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a3a      	ldr	r2, [pc, #232]	; (8000bc0 <uart_init+0x22c>)
 8000ad8:	f043 030c 	orr.w	r3, r3, #12
 8000adc:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000ade:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <uart_init+0x22c>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	4a37      	ldr	r2, [pc, #220]	; (8000bc0 <uart_init+0x22c>)
 8000ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ae8:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <uart_init+0x22c>)
 8000aec:	4a34      	ldr	r2, [pc, #208]	; (8000bc0 <uart_init+0x22c>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000af6:	2300      	movs	r3, #0
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
 8000afa:	2300      	movs	r3, #0
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fbb4 	bl	8000270 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <uart_init+0x22c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d010      	beq.n	8000b3a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b1a:	005a      	lsls	r2, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	fb01 f202 	mul.w	r2, r1, r2
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b38:	e00d      	b.n	8000b56 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d302      	bcc.n	8000b66 <uart_init+0x1d2>
        divider++;
 8000b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b62:	3301      	adds	r3, #1
 8000b64:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <uart_init+0x22c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00b      	beq.n	8000b8a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b74:	085b      	lsrs	r3, r3, #1
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b7e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b82:	4013      	ands	r3, r2
 8000b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b86:	4313      	orrs	r3, r2
 8000b88:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <uart_init+0x22c>)
 8000b8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b8e:	b292      	uxth	r2, r2
 8000b90:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <uart_init+0x22c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <uart_init+0x22c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <uart_init+0x230>)
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <uart_init+0x22c>)
 8000ba4:	f7ff fdb6 	bl	8000714 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000ba8:	2026      	movs	r0, #38	; 0x26
 8000baa:	f7ff fe5f 	bl	800086c <NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	; 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000002c 	.word	0x2000002c
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	00050105 	.word	0x00050105

08000bc8 <lcd_transmit_byte>:

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <lcd_transmit_byte+0x5c>)
 8000bd4:	8a9b      	ldrh	r3, [r3, #20]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <lcd_transmit_byte+0x5c>)
 8000bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8000be2:	bf00      	nop
 8000be4:	2102      	movs	r1, #2
 8000be6:	4810      	ldr	r0, [pc, #64]	; (8000c28 <lcd_transmit_byte+0x60>)
 8000be8:	f7ff fd66 	bl	80006b8 <SPI_I2S_GetFlagStatus>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d1f8      	bne.n	8000be4 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <lcd_transmit_byte+0x60>)
 8000bf8:	f7ff fd48 	bl	800068c <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8000bfc:	bf00      	nop
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <lcd_transmit_byte+0x60>)
 8000c02:	f7ff fd59 	bl	80006b8 <SPI_I2S_GetFlagStatus>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d1f8      	bne.n	8000bfe <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <lcd_transmit_byte+0x5c>)
 8000c0e:	8a9b      	ldrh	r3, [r3, #20]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <lcd_transmit_byte+0x5c>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	8293      	strh	r3, [r2, #20]
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	48000400 	.word	0x48000400
 8000c28:	40003800 	.word	0x40003800

08000c2c <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000c38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c3c:	8a9b      	ldrh	r3, [r3, #20]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff ffbb 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000c52:	2010      	movs	r0, #16
 8000c54:	f7ff ffb8 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 8000c58:	20b0      	movs	r0, #176	; 0xb0
 8000c5a:	f7ff ffb5 	bl	8000bc8 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000c5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c62:	8a9b      	ldrh	r3, [r3, #20]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e009      	b.n	8000c8c <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ffa1 	bl	8000bc8 <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c90:	ddf2      	ble.n	8000c78 <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000c92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c96:	8a9b      	ldrh	r3, [r3, #20]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ff8e 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000cac:	2010      	movs	r0, #16
 8000cae:	f7ff ff8b 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8000cb2:	20b1      	movs	r0, #177	; 0xb1
 8000cb4:	f7ff ff88 	bl	8000bc8 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000cb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cbc:	8a9b      	ldrh	r3, [r3, #20]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	e009      	b.n	8000ce6 <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff74 	bl	8000bc8 <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2bff      	cmp	r3, #255	; 0xff
 8000cea:	ddf2      	ble.n	8000cd2 <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000cec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cf0:	8a9b      	ldrh	r3, [r3, #20]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff61 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000d06:	2010      	movs	r0, #16
 8000d08:	f7ff ff5e 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8000d0c:	20b2      	movs	r0, #178	; 0xb2
 8000d0e:	f7ff ff5b 	bl	8000bc8 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000d12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d16:	8a9b      	ldrh	r3, [r3, #20]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 8000d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e009      	b.n	8000d42 <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff46 	bl	8000bc8 <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000d48:	dbf1      	blt.n	8000d2e <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000d4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d4e:	8a9b      	ldrh	r3, [r3, #20]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff ff32 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000d64:	2010      	movs	r0, #16
 8000d66:	f7ff ff2f 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 8000d6a:	20b3      	movs	r0, #179	; 0xb3
 8000d6c:	f7ff ff2c 	bl	8000bc8 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d74:	8a9b      	ldrh	r3, [r3, #20]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 8000d84:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e009      	b.n	8000da0 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff17 	bl	8000bc8 <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000da6:	dbf1      	blt.n	8000d8c <lcd_push_buffer+0x160>
    }
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <lcd_reset>:

void lcd_reset()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8000db6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dba:	8a9b      	ldrh	r3, [r3, #20]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <lcd_reset+0xd8>)
 8000dcc:	8a9b      	ldrh	r3, [r3, #20]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4a2d      	ldr	r2, [pc, #180]	; (8000e88 <lcd_reset+0xd8>)
 8000dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <lcd_reset+0xd8>)
 8000ddc:	8a9b      	ldrh	r3, [r3, #20]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4a29      	ldr	r2, [pc, #164]	; (8000e88 <lcd_reset+0xd8>)
 8000de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	e003      	b.n	8000df8 <lcd_reset+0x48>
 8000df0:	bf00      	nop
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3301      	adds	r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f241 2247 	movw	r2, #4679	; 0x1247
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d9f6      	bls.n	8000df0 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <lcd_reset+0xd8>)
 8000e04:	8a9b      	ldrh	r3, [r3, #20]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <lcd_reset+0xd8>)
 8000e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	e003      	b.n	8000e20 <lcd_reset+0x70>
 8000e18:	bf00      	nop
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <lcd_reset+0xdc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d9f7      	bls.n	8000e18 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000e28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e2c:	8a9b      	ldrh	r3, [r3, #20]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 8000e3c:	20ae      	movs	r0, #174	; 0xae
 8000e3e:	f7ff fec3 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 8000e42:	20a2      	movs	r0, #162	; 0xa2
 8000e44:	f7ff fec0 	bl	8000bc8 <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 8000e48:	20a0      	movs	r0, #160	; 0xa0
 8000e4a:	f7ff febd 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 8000e4e:	20c8      	movs	r0, #200	; 0xc8
 8000e50:	f7ff feba 	bl	8000bc8 <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 8000e54:	2022      	movs	r0, #34	; 0x22
 8000e56:	f7ff feb7 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 8000e5a:	202f      	movs	r0, #47	; 0x2f
 8000e5c:	f7ff feb4 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 8000e60:	2040      	movs	r0, #64	; 0x40
 8000e62:	f7ff feb1 	bl	8000bc8 <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 8000e66:	20af      	movs	r0, #175	; 0xaf
 8000e68:	f7ff feae 	bl	8000bc8 <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8000e6c:	2081      	movs	r0, #129	; 0x81
 8000e6e:	f7ff feab 	bl	8000bc8 <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 8000e72:	2017      	movs	r0, #23
 8000e74:	f7ff fea8 	bl	8000bc8 <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8000e78:	20a6      	movs	r0, #166	; 0xa6
 8000e7a:	f7ff fea5 	bl	8000bc8 <lcd_transmit_byte>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	0005f36f 	.word	0x0005f36f

08000e90 <lcd_init>:

void lcd_init() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8000e94:	4b9d      	ldr	r3, [pc, #628]	; (800110c <lcd_init+0x27c>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	4a9c      	ldr	r2, [pc, #624]	; (800110c <lcd_init+0x27c>)
 8000e9a:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8000e9e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8000ea0:	4b9a      	ldr	r3, [pc, #616]	; (800110c <lcd_init+0x27c>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4a99      	ldr	r2, [pc, #612]	; (800110c <lcd_init+0x27c>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eaa:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8000eac:	4b98      	ldr	r3, [pc, #608]	; (8001110 <lcd_init+0x280>)
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	4a97      	ldr	r2, [pc, #604]	; (8001110 <lcd_init+0x280>)
 8000eb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000eb6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8000eb8:	4b95      	ldr	r3, [pc, #596]	; (8001110 <lcd_init+0x280>)
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	4a94      	ldr	r2, [pc, #592]	; (8001110 <lcd_init+0x280>)
 8000ebe:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000ec2:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8000ec4:	4b92      	ldr	r3, [pc, #584]	; (8001110 <lcd_init+0x280>)
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	4a91      	ldr	r2, [pc, #580]	; (8001110 <lcd_init+0x280>)
 8000eca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000ece:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8000ed0:	4b8f      	ldr	r3, [pc, #572]	; (8001110 <lcd_init+0x280>)
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	4a8e      	ldr	r2, [pc, #568]	; (8001110 <lcd_init+0x280>)
 8000ed6:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000eda:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8000edc:	4b8c      	ldr	r3, [pc, #560]	; (8001110 <lcd_init+0x280>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	4a8b      	ldr	r2, [pc, #556]	; (8001110 <lcd_init+0x280>)
 8000ee2:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000ee6:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000ee8:	4b89      	ldr	r3, [pc, #548]	; (8001110 <lcd_init+0x280>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a88      	ldr	r2, [pc, #544]	; (8001110 <lcd_init+0x280>)
 8000eee:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000ef2:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8000ef4:	4b86      	ldr	r3, [pc, #536]	; (8001110 <lcd_init+0x280>)
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4985      	ldr	r1, [pc, #532]	; (8001110 <lcd_init+0x280>)
 8000efc:	f645 73ff 	movw	r3, #24575	; 0x5fff
 8000f00:	4013      	ands	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000f06:	4a82      	ldr	r2, [pc, #520]	; (8001110 <lcd_init+0x280>)
 8000f08:	4b81      	ldr	r3, [pc, #516]	; (8001110 <lcd_init+0x280>)
 8000f0a:	8892      	ldrh	r2, [r2, #4]
 8000f0c:	b292      	uxth	r2, r2
 8000f0e:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8000f10:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <lcd_init+0x280>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a7e      	ldr	r2, [pc, #504]	; (8001110 <lcd_init+0x280>)
 8000f16:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000f1a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000f1c:	4b7c      	ldr	r3, [pc, #496]	; (8001110 <lcd_init+0x280>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a7b      	ldr	r2, [pc, #492]	; (8001110 <lcd_init+0x280>)
 8000f22:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8000f26:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8000f28:	4b79      	ldr	r3, [pc, #484]	; (8001110 <lcd_init+0x280>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a78      	ldr	r2, [pc, #480]	; (8001110 <lcd_init+0x280>)
 8000f2e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000f32:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000f34:	4b76      	ldr	r3, [pc, #472]	; (8001110 <lcd_init+0x280>)
 8000f36:	4a76      	ldr	r2, [pc, #472]	; (8001110 <lcd_init+0x280>)
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 8000f3c:	4b74      	ldr	r3, [pc, #464]	; (8001110 <lcd_init+0x280>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	4a73      	ldr	r2, [pc, #460]	; (8001110 <lcd_init+0x280>)
 8000f42:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000f46:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000f48:	4b71      	ldr	r3, [pc, #452]	; (8001110 <lcd_init+0x280>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	4a70      	ldr	r2, [pc, #448]	; (8001110 <lcd_init+0x280>)
 8000f4e:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8000f52:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 8000f54:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <lcd_init+0x280>)
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	4a6d      	ldr	r2, [pc, #436]	; (8001110 <lcd_init+0x280>)
 8000f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000f68:	4a69      	ldr	r2, [pc, #420]	; (8001110 <lcd_init+0x280>)
 8000f6a:	4b69      	ldr	r3, [pc, #420]	; (8001110 <lcd_init+0x280>)
 8000f6c:	8892      	ldrh	r2, [r2, #4]
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 8000f72:	4b67      	ldr	r3, [pc, #412]	; (8001110 <lcd_init+0x280>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a66      	ldr	r2, [pc, #408]	; (8001110 <lcd_init+0x280>)
 8000f78:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000f7c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000f7e:	4b64      	ldr	r3, [pc, #400]	; (8001110 <lcd_init+0x280>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a63      	ldr	r2, [pc, #396]	; (8001110 <lcd_init+0x280>)
 8000f84:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8000f88:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8000f8a:	4b61      	ldr	r3, [pc, #388]	; (8001110 <lcd_init+0x280>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	4a60      	ldr	r2, [pc, #384]	; (8001110 <lcd_init+0x280>)
 8000f90:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000f94:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000f96:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <lcd_init+0x280>)
 8000f98:	4a5d      	ldr	r2, [pc, #372]	; (8001110 <lcd_init+0x280>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8000f9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fa8:	0c9b      	lsrs	r3, r3, #18
 8000faa:	049b      	lsls	r3, r3, #18
 8000fac:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000fae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8000fbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fc2:	889b      	ldrh	r3, [r3, #4]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000fce:	f023 0301 	bic.w	r3, r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000fd6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fde:	8892      	ldrh	r2, [r2, #4]
 8000fe0:	b292      	uxth	r2, r2
 8000fe2:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8000fe4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fee:	0c9b      	lsrs	r3, r3, #18
 8000ff0:	049b      	lsls	r3, r3, #18
 8000ff2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000ff4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 8001004:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800100e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001012:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 8001014:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800101e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001022:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 8001024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800102e:	0c9b      	lsrs	r3, r3, #18
 8001030:	049b      	lsls	r3, r3, #18
 8001032:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001034:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001038:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 8001040:	4b33      	ldr	r3, [pc, #204]	; (8001110 <lcd_init+0x280>)
 8001042:	8a9b      	ldrh	r3, [r3, #20]
 8001044:	b29b      	uxth	r3, r3
 8001046:	4a32      	ldr	r2, [pc, #200]	; (8001110 <lcd_init+0x280>)
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	b29b      	uxth	r3, r3
 800104e:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <lcd_init+0x284>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	4a2f      	ldr	r2, [pc, #188]	; (8001114 <lcd_init+0x284>)
 8001058:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800105c:	b29b      	uxth	r3, r3
 800105e:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 8001060:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <lcd_init+0x284>)
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <lcd_init+0x284>)
 8001064:	8812      	ldrh	r2, [r2, #0]
 8001066:	b292      	uxth	r2, r2
 8001068:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <lcd_init+0x284>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <lcd_init+0x284>)
 8001072:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8001076:	b29b      	uxth	r3, r3
 8001078:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <lcd_init+0x284>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	4a24      	ldr	r2, [pc, #144]	; (8001114 <lcd_init+0x284>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	b29b      	uxth	r3, r3
 8001088:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <lcd_init+0x284>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4a20      	ldr	r2, [pc, #128]	; (8001114 <lcd_init+0x284>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	b29b      	uxth	r3, r3
 8001098:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <lcd_init+0x284>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <lcd_init+0x284>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <lcd_init+0x284>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4a18      	ldr	r2, [pc, #96]	; (8001114 <lcd_init+0x284>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <lcd_init+0x284>)
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <lcd_init+0x284>)
 80010be:	8812      	ldrh	r2, [r2, #0]
 80010c0:	b292      	uxth	r2, r2
 80010c2:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <lcd_init+0x284>)
 80010c6:	889b      	ldrh	r3, [r3, #4]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <lcd_init+0x284>)
 80010cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <lcd_init+0x284>)
 80010d6:	889b      	ldrh	r3, [r3, #4]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <lcd_init+0x284>)
 80010dc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <lcd_init+0x284>)
 80010e6:	8b9b      	ldrh	r3, [r3, #28]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <lcd_init+0x284>)
 80010ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <lcd_init+0x284>)
 80010f6:	2207      	movs	r2, #7
 80010f8:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <lcd_init+0x284>)
 80010fc:	889b      	ldrh	r3, [r3, #4]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <lcd_init+0x284>)
 8001102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001106:	b29b      	uxth	r3, r3
 8001108:	e006      	b.n	8001118 <lcd_init+0x288>
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	48000400 	.word	0x48000400
 8001114:	40003800 	.word	0x40003800
 8001118:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <lcd_init+0x2b4>)
 800111c:	889b      	ldrh	r3, [r3, #4]
 800111e:	b29b      	uxth	r3, r3
 8001120:	4a08      	ldr	r2, [pc, #32]	; (8001144 <lcd_init+0x2b4>)
 8001122:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001126:	b29b      	uxth	r3, r3
 8001128:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <lcd_init+0x2b4>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <lcd_init+0x2b4>)
 8001132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001136:	b29b      	uxth	r3, r3
 8001138:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 800113a:	f7ff fe39 	bl	8000db0 <lcd_reset>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40003800 	.word	0x40003800

08001148 <NVIC_EnableIRQ>:
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	2201      	movs	r2, #1
 800115a:	fa02 f103 	lsl.w	r1, r2, r3
 800115e:	4a06      	ldr	r2, [pc, #24]	; (8001178 <NVIC_EnableIRQ+0x30>)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	095b      	lsrs	r3, r3, #5
 8001166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	da0b      	bge.n	80011a8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <NVIC_SetPriority+0x4c>)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	3b04      	subs	r3, #4
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80011a6:	e009      	b.n	80011bc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <NVIC_SetPriority+0x50>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <setTimer>:
#include "Timer.h"

volatile int32_t ticks = 0;

void setTimer(int timX, int priority, int preScale) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	switch(timX){
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d032      	beq.n	8001248 <setTimer+0x78>
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d059      	beq.n	800129a <setTimer+0xca>
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d17e      	bne.n	80012e8 <setTimer+0x118>
		case 2:
			RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2;
 80011ea:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <setTimer+0x128>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a42      	ldr	r2, [pc, #264]	; (80012f8 <setTimer+0x128>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	61d3      	str	r3, [r2, #28]
			TIM2->CR1 = 0x0000;
 80011f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fa:	2200      	movs	r2, #0
 80011fc:	801a      	strh	r2, [r3, #0]
			TIM2->ARR = 0xF9FF; // Set reload value
 80011fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001202:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->PSC = preScale; // Set prescal6value
 8001208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	b292      	uxth	r2, r2
 8001210:	851a      	strh	r2, [r3, #40]	; 0x28
			TIM2->DIER |= 0x0001; // Enable timer 2 interrupts
 8001212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	60d3      	str	r3, [r2, #12]
			TIM2->CR1 |= 0x0001;
 8001222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	b29b      	uxth	r3, r3
 8001234:	8013      	strh	r3, [r2, #0]

			NVIC_SetPriority(TIM2_IRQn, priority); // Set interrupt priority
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	4619      	mov	r1, r3
 800123a:	201c      	movs	r0, #28
 800123c:	f7ff ff9e 	bl	800117c <NVIC_SetPriority>
			NVIC_EnableIRQ(TIM2_IRQn);
 8001240:	201c      	movs	r0, #28
 8001242:	f7ff ff81 	bl	8001148 <NVIC_EnableIRQ>
			break;
 8001246:	e053      	b.n	80012f0 <setTimer+0x120>
		case 3:
			RCC->APB1ENR |= RCC_APB1Periph_TIM3; // Enable clock line to timer 2;
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <setTimer+0x128>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <setTimer+0x128>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	61d3      	str	r3, [r2, #28]
			TIM3->CR1 = 0x0000;
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <setTimer+0x12c>)
 8001256:	2200      	movs	r2, #0
 8001258:	801a      	strh	r2, [r3, #0]
			TIM3->ARR = 0x9C3FF/4; // Set reload value
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <setTimer+0x12c>)
 800125c:	4a28      	ldr	r2, [pc, #160]	; (8001300 <setTimer+0x130>)
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC = preScale*4; // Set prescal6value
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4a25      	ldr	r2, [pc, #148]	; (80012fc <setTimer+0x12c>)
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	b29b      	uxth	r3, r3
 800126a:	8513      	strh	r3, [r2, #40]	; 0x28
			TIM3->DIER |= 0x0001; // Enable timer 3 interrupts
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <setTimer+0x12c>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <setTimer+0x12c>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	60d3      	str	r3, [r2, #12]
			TIM3->CR1 |= 0x0001;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <setTimer+0x12c>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <setTimer+0x12c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	b29b      	uxth	r3, r3
 8001286:	8013      	strh	r3, [r2, #0]

			NVIC_SetPriority(TIM3_IRQn, priority); // Set interrupt priority
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4619      	mov	r1, r3
 800128c:	201d      	movs	r0, #29
 800128e:	f7ff ff75 	bl	800117c <NVIC_SetPriority>
			NVIC_EnableIRQ(TIM3_IRQn);
 8001292:	201d      	movs	r0, #29
 8001294:	f7ff ff58 	bl	8001148 <NVIC_EnableIRQ>

			break;
 8001298:	e02a      	b.n	80012f0 <setTimer+0x120>
		case 4:
			RCC->APB1ENR |= RCC_APB1Periph_TIM4; // Enable clock line to timer 2;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <setTimer+0x128>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <setTimer+0x128>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	61d3      	str	r3, [r2, #28]
			TIM4->CR1 = 0x0000;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <setTimer+0x134>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	801a      	strh	r2, [r3, #0]
			TIM4->ARR = 0x9C3FF; // Set reload value
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <setTimer+0x134>)
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <setTimer+0x138>)
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC = preScale; // Set prescal6value
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <setTimer+0x134>)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	b292      	uxth	r2, r2
 80012b8:	851a      	strh	r2, [r3, #40]	; 0x28
			TIM4->DIER |= 0x0001; // Enable timer 4 interrupts
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <setTimer+0x134>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <setTimer+0x134>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	60d3      	str	r3, [r2, #12]
			TIM4->CR1 |= 0x0001;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <setTimer+0x134>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <setTimer+0x134>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	8013      	strh	r3, [r2, #0]

			NVIC_SetPriority(TIM4_IRQn, priority); // Set interrupt priority
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	4619      	mov	r1, r3
 80012da:	201e      	movs	r0, #30
 80012dc:	f7ff ff4e 	bl	800117c <NVIC_SetPriority>
			NVIC_EnableIRQ(TIM4_IRQn);
 80012e0:	201e      	movs	r0, #30
 80012e2:	f7ff ff31 	bl	8001148 <NVIC_EnableIRQ>

			break;
 80012e6:	e003      	b.n	80012f0 <setTimer+0x120>
		default:
			printf("ERROR! Wrong Timer (2,3,4)\n");
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <setTimer+0x13c>)
 80012ea:	f000 fcd1 	bl	8001c90 <puts>
			break;
 80012ee:	bf00      	nop
	}
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40000400 	.word	0x40000400
 8001300:	000270ff 	.word	0x000270ff
 8001304:	40000800 	.word	0x40000800
 8001308:	0009c3ff 	.word	0x0009c3ff
 800130c:	08002a48 	.word	0x08002a48

08001310 <clrscr>:
void resetbgcolor() {
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

void clrscr(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	printf("%c[2J", ESC);
 8001314:	211b      	movs	r1, #27
 8001316:	4802      	ldr	r0, [pc, #8]	; (8001320 <clrscr+0x10>)
 8001318:	f000 fc46 	bl	8001ba8 <iprintf>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	08002a90 	.word	0x08002a90

08001324 <gotoxy>:

void clreol(){
	printf("%c[J", ESC);
}

void gotoxy(uint8_t x, uint8_t y){
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	460a      	mov	r2, r1
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	4613      	mov	r3, r2
 8001332:	71bb      	strb	r3, [r7, #6]
	printf("%c[%d;%dH",ESC ,y ,x);
 8001334:	79ba      	ldrb	r2, [r7, #6]
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	211b      	movs	r1, #27
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <gotoxy+0x24>)
 800133c:	f000 fc34 	bl	8001ba8 <iprintf>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	08002aa0 	.word	0x08002aa0

0800134c <TIM2_IRQHandler>:
#include "ansi.h"
#include <stdlib.h>

int8_t count = 0, brah = 0;

void TIM2_IRQHandler(void) {
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
 ++count;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <TIM2_IRQHandler+0x48>)
 8001352:	f993 3000 	ldrsb.w	r3, [r3]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	3301      	adds	r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	b25a      	sxtb	r2, r3
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <TIM2_IRQHandler+0x48>)
 8001360:	701a      	strb	r2, [r3, #0]

 if(count == 50) {
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <TIM2_IRQHandler+0x48>)
 8001364:	f993 3000 	ldrsb.w	r3, [r3]
 8001368:	2b32      	cmp	r3, #50	; 0x32
 800136a:	d105      	bne.n	8001378 <TIM2_IRQHandler+0x2c>

     count = 0;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <TIM2_IRQHandler+0x48>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
     brah = 1;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <TIM2_IRQHandler+0x4c>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]

 }

 TIM2->SR &= ~0x0001; // Clear interrupt bit
 8001378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6113      	str	r3, [r2, #16]
 }
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200001af 	.word	0x200001af
 8001398:	200001b0 	.word	0x200001b0

0800139c <convert>:

void convert(uint8_t coords[][128], uint8_t *buffer) {
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]

    for(int j = 0; j < 4; j++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e078      	b.n	800149e <convert+0x102>

        for (int i = 0; i < 128; i++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	e06f      	b.n	8001492 <convert+0xf6>

            buffer[i+ j * 128]=coords[7+j*8][i] << 7 | coords[6+j*8][i] << 6 | coords[5+j*8][i] << 5 | coords[4+j*8][i] << 4| coords[3+j*8][i] << 3| coords[2+j*8][i] << 2|coords[1+j*8][i] << 1|coords[0+j*8][i];
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	3307      	adds	r3, #7
 80013b8:	01db      	lsls	r3, r3, #7
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	441a      	add	r2, r3
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	01db      	lsls	r3, r3, #7
 80013c6:	b25a      	sxtb	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	3306      	adds	r3, #6
 80013ce:	01db      	lsls	r3, r3, #7
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4419      	add	r1, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	440b      	add	r3, r1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	019b      	lsls	r3, r3, #6
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	3305      	adds	r3, #5
 80013e8:	01db      	lsls	r3, r3, #7
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4419      	add	r1, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	440b      	add	r3, r1
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	015b      	lsls	r3, r3, #5
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	3304      	adds	r3, #4
 8001402:	01db      	lsls	r3, r3, #7
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4419      	add	r1, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	440b      	add	r3, r1
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b25a      	sxtb	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	3303      	adds	r3, #3
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4419      	add	r1, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	440b      	add	r3, r1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	b25b      	sxtb	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b25a      	sxtb	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	3302      	adds	r3, #2
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4419      	add	r1, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	440b      	add	r3, r1
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	b25b      	sxtb	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b25a      	sxtb	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	3301      	adds	r3, #1
 8001450:	01db      	lsls	r3, r3, #7
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4419      	add	r1, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	440b      	add	r3, r1
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b25a      	sxtb	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	4619      	mov	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4419      	add	r1, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	440b      	add	r3, r1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b25b      	sxtb	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b259      	sxtb	r1, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	01da      	lsls	r2, r3, #7
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	4413      	add	r3, r2
 8001482:	461a      	mov	r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4413      	add	r3, r2
 8001488:	b2ca      	uxtb	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 128; i++) {
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3301      	adds	r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b7f      	cmp	r3, #127	; 0x7f
 8001496:	dd8c      	ble.n	80013b2 <convert+0x16>
    for(int j = 0; j < 4; j++) {
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3301      	adds	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	dd83      	ble.n	80013ac <convert+0x10>

        }

    }

}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <main>:


int main() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	f5ad 5d90 	sub.w	sp, sp, #4608	; 0x1200
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
    uart_init(9600);
 80014ba:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80014be:	f7ff fa69 	bl	8000994 <uart_init>

    clrscr();
 80014c2:	f7ff ff25 	bl	8001310 <clrscr>

    gotoxy(0,0);
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff ff2b 	bl	8001324 <gotoxy>

    lcd_init();
 80014ce:	f7ff fcdf 	bl	8000e90 <lcd_init>

    setTimer(2,0,0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2002      	movs	r0, #2
 80014d8:	f7ff fe7a 	bl	80011d0 <setTimer>

    bullet_t bullet;

    bulletArr_t * bulletArr;

    uint8_t coords[32][128] = {0};
 80014dc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80014e0:	3b10      	subs	r3, #16
 80014e2:	4618      	mov	r0, r3
 80014e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e8:	461a      	mov	r2, r3
 80014ea:	2100      	movs	r1, #0
 80014ec:	f000 faac 	bl	8001a48 <memset>

    uint8_t buffer[512];

    initBullet(&bullet,60,10);
 80014f0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80014f4:	220a      	movs	r2, #10
 80014f6:	213c      	movs	r1, #60	; 0x3c
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f82f 	bl	800155c <initBullet>

    bulletArr = (bulletArr_t *) malloc(1*sizeof(bulletArr_t));
 80014fe:	20b4      	movs	r0, #180	; 0xb4
 8001500:	f000 fa9a 	bl	8001a38 <malloc>
 8001504:	4603      	mov	r3, r0
 8001506:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800150a:	f102 020c 	add.w	r2, r2, #12
 800150e:	6013      	str	r3, [r2, #0]

    add_bullet(bulletArr,bullet);
 8001510:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001516:	f507 5090 	add.w	r0, r7, #4608	; 0x1200
 800151a:	f100 000c 	add.w	r0, r0, #12
 800151e:	6800      	ldr	r0, [r0, #0]
 8001520:	f000 f850 	bl	80015c4 <add_bullet>

    draw_bullet(bulletArr, coords);
 8001524:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001528:	3b10      	subs	r3, #16
 800152a:	4619      	mov	r1, r3
 800152c:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001530:	f103 030c 	add.w	r3, r3, #12
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f000 f8b3 	bl	80016a0 <draw_bullet>

    convert(coords,buffer);
 800153a:	f107 0210 	add.w	r2, r7, #16
 800153e:	3a10      	subs	r2, #16
 8001540:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001544:	3b10      	subs	r3, #16
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff27 	bl	800139c <convert>

    lcd_push_buffer(buffer);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	3b10      	subs	r3, #16
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fb69 	bl	8000c2c <lcd_push_buffer>

    while(1) {
 800155a:	e7fe      	b.n	800155a <main+0xaa>

0800155c <initBullet>:
    asteroid->cx = point.x;
    asteroid->cy = point.y;

}

void initBullet(bullet_t * bullet, uint8_t x, uint8_t y) {
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
 8001568:	4613      	mov	r3, r2
 800156a:	70bb      	strb	r3, [r7, #2]


	bullet->x = x;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	701a      	strb	r2, [r3, #0]
	bullet->y = y;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	78ba      	ldrb	r2, [r7, #2]
 8001576:	705a      	strb	r2, [r3, #1]
	bullet->alive = 1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	721a      	strb	r2, [r3, #8]

	int i;

	for (i = 0; i < 3; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e016      	b.n	80015b2 <initBullet+0x56>

			bullet->points[i].x = bullet->x+i;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4413      	add	r3, r2
 800158e:	b2d9      	uxtb	r1, r3
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	460a      	mov	r2, r1
 800159a:	709a      	strb	r2, [r3, #2]
			bullet->points[i].y = bullet->y;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7859      	ldrb	r1, [r3, #1]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	460a      	mov	r2, r1
 80015aa:	70da      	strb	r2, [r3, #3]
	for (i = 0; i < 3; i++) {
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	dde5      	ble.n	8001584 <initBullet+0x28>

		}


}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <add_bullet>:
    asteroid->points[indexArr].x = x;
    asteroid->points[indexArr].y = y;
    } else indexArr--;
}

void add_bullet(bulletArr_t * bulletArr, bullet_t bullet) {
 80015c4:	b490      	push	{r4, r7}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	4638      	mov	r0, r7
 80015ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int i,j;

	for (i = 0; i < 20; i++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e05b      	b.n	8001690 <add_bullet+0xcc>

			if(!bulletArr->bullets[i].alive) {
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4613      	mov	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	3308      	adds	r3, #8
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	f083 0301 	eor.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d04b      	beq.n	800168a <add_bullet+0xc6>

				bulletArr->bullets[i].x = bullet.x;
 80015f2:	7838      	ldrb	r0, [r7, #0]
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	440b      	add	r3, r1
 8001600:	4602      	mov	r2, r0
 8001602:	701a      	strb	r2, [r3, #0]
				bulletArr->bullets[i].y = bullet.y;
 8001604:	7878      	ldrb	r0, [r7, #1]
 8001606:	68f9      	ldr	r1, [r7, #12]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	440b      	add	r3, r1
 8001612:	3301      	adds	r3, #1
 8001614:	4602      	mov	r2, r0
 8001616:	701a      	strb	r2, [r3, #0]
				bulletArr->bullets[i].alive = 1;
 8001618:	68f9      	ldr	r1, [r7, #12]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4413      	add	r3, r2
 8001622:	440b      	add	r3, r1
 8001624:	3308      	adds	r3, #8
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]

				for(j = 0; j < 3; j++) {
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	e028      	b.n	8001682 <add_bullet+0xbe>

					bulletArr->bullets[i].points[j].x = bullet.points[j].x;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	f107 0218 	add.w	r2, r7, #24
 8001638:	4413      	add	r3, r2
 800163a:	f813 4c16 	ldrb.w	r4, [r3, #-22]
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	0058      	lsls	r0, r3, #1
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	4403      	add	r3, r0
 800164e:	440b      	add	r3, r1
 8001650:	3302      	adds	r3, #2
 8001652:	4622      	mov	r2, r4
 8001654:	701a      	strb	r2, [r3, #0]
					bulletArr->bullets[i].points[j].y = bullet.points[j].y;
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	f107 0218 	add.w	r2, r7, #24
 800165e:	4413      	add	r3, r2
 8001660:	f813 4c15 	ldrb.w	r4, [r3, #-21]
 8001664:	68f9      	ldr	r1, [r7, #12]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	0058      	lsls	r0, r3, #1
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4413      	add	r3, r2
 8001672:	4403      	add	r3, r0
 8001674:	440b      	add	r3, r1
 8001676:	3303      	adds	r3, #3
 8001678:	4622      	mov	r2, r4
 800167a:	701a      	strb	r2, [r3, #0]
				for(j = 0; j < 3; j++) {
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	3301      	adds	r3, #1
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	2b02      	cmp	r3, #2
 8001686:	ddd3      	ble.n	8001630 <add_bullet+0x6c>

				}

				break;
 8001688:	e005      	b.n	8001696 <add_bullet+0xd2>
	for (i = 0; i < 20; i++) {
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b13      	cmp	r3, #19
 8001694:	dda0      	ble.n	80015d8 <add_bullet+0x14>

			}

		}

}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bc90      	pop	{r4, r7}
 800169e:	4770      	bx	lr

080016a0 <draw_bullet>:

void draw_bullet(bulletArr_t * bulletArr, uint8_t coords[][128]) {
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]

	int j, k;

	for (k = 0; j < 20; k++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	e021      	b.n	80016f4 <draw_bullet+0x54>

	for (j = 0; j < 3; j++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	e018      	b.n	80016e8 <draw_bullet+0x48>

		if (bulletArr->bullets[j].points[0].x+1 < 127) {
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	3302      	adds	r3, #2
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	2b7e      	cmp	r3, #126	; 0x7e
 80016ca:	dd09      	ble.n	80016e0 <draw_bullet+0x40>

			continue;

		} else {

			bulletArr->bullets[j].alive = 0;
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4613      	mov	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	3308      	adds	r3, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	e000      	b.n	80016e2 <draw_bullet+0x42>
			continue;
 80016e0:	bf00      	nop
	for (j = 0; j < 3; j++) {
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	dde3      	ble.n	80016b6 <draw_bullet+0x16>
	for (k = 0; j < 20; k++) {
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b13      	cmp	r3, #19
 80016f8:	ddda      	ble.n	80016b0 <draw_bullet+0x10>
	}

	}


	for (k = 0; k < 20; k++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	e02e      	b.n	800175e <draw_bullet+0xbe>

		if (bulletArr->bullets[k].alive) {
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4413      	add	r3, r2
 800170a:	440b      	add	r3, r1
 800170c:	3308      	adds	r3, #8
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d021      	beq.n	8001758 <draw_bullet+0xb8>

			for (j = 0; j < 3; j++) {
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e01b      	b.n	8001752 <draw_bullet+0xb2>

				coords[bulletArr->bullets[j].points[j].y][bulletArr->bullets[j].points[j].x] = 1;
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	440b      	add	r3, r1
 800172a:	3303      	adds	r3, #3
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	01db      	lsls	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	18d1      	adds	r1, r2, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	4403      	add	r3, r0
 8001744:	3302      	adds	r3, #2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2201      	movs	r2, #1
 800174a:	54ca      	strb	r2, [r1, r3]
			for (j = 0; j < 3; j++) {
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3301      	adds	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b02      	cmp	r3, #2
 8001756:	dde0      	ble.n	800171a <draw_bullet+0x7a>
	for (k = 0; k < 20; k++) {
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	3301      	adds	r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b13      	cmp	r3, #19
 8001762:	ddcd      	ble.n	8001700 <draw_bullet+0x60>





}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e00a      	b.n	8001798 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001782:	f3af 8000 	nop.w
 8001786:	4601      	mov	r1, r0
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	60ba      	str	r2, [r7, #8]
 800178e:	b2ca      	uxtb	r2, r1
 8001790:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbf0      	blt.n	8001782 <_read+0x12>
	}

return len;
 80017a0:	687b      	ldr	r3, [r7, #4]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	return -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d2:	605a      	str	r2, [r3, #4]
	return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_isatty>:

int _isatty(int file)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
	return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <_sbrk+0x50>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x16>
		heap_end = &end;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <_sbrk+0x50>)
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <_sbrk+0x54>)
 8001828:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <_sbrk+0x50>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <_sbrk+0x50>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	466a      	mov	r2, sp
 800183a:	4293      	cmp	r3, r2
 800183c:	d907      	bls.n	800184e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800183e:	f000 f8d1 	bl	80019e4 <__errno>
 8001842:	4602      	mov	r2, r0
 8001844:	230c      	movs	r3, #12
 8001846:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
 800184c:	e006      	b.n	800185c <_sbrk+0x48>
	}

	heap_end += incr;
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <_sbrk+0x50>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a03      	ldr	r2, [pc, #12]	; (8001864 <_sbrk+0x50>)
 8001858:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200001b4 	.word	0x200001b4
 8001868:	200001c8 	.word	0x200001c8

0800186c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <SystemInit+0x84>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001876:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <SystemInit+0x84>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <SystemInit+0x88>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <SystemInit+0x88>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <SystemInit+0x88>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4918      	ldr	r1, [pc, #96]	; (80018f4 <SystemInit+0x88>)
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <SystemInit+0x8c>)
 8001894:	4013      	ands	r3, r2
 8001896:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <SystemInit+0x88>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <SystemInit+0x88>)
 800189e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <SystemInit+0x88>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <SystemInit+0x88>)
 80018ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <SystemInit+0x88>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <SystemInit+0x88>)
 80018ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80018be:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <SystemInit+0x88>)
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <SystemInit+0x88>)
 80018c6:	f023 030f 	bic.w	r3, r3, #15
 80018ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <SystemInit+0x88>)
 80018ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d0:	4908      	ldr	r1, [pc, #32]	; (80018f4 <SystemInit+0x88>)
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <SystemInit+0x90>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <SystemInit+0x88>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80018de:	f000 f80f 	bl	8001900 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018e2:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <SystemInit+0x84>)
 80018e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018e8:	609a      	str	r2, [r3, #8]
#endif  
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	f87fc00c 	.word	0xf87fc00c
 80018fc:	ff00fccc 	.word	0xff00fccc

08001900 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <SetSysClock+0x88>)
 8001906:	2212      	movs	r2, #18
 8001908:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <SetSysClock+0x8c>)
 800190c:	4a1f      	ldr	r2, [pc, #124]	; (800198c <SetSysClock+0x8c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <SetSysClock+0x8c>)
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <SetSysClock+0x8c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <SetSysClock+0x8c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a1b      	ldr	r2, [pc, #108]	; (800198c <SetSysClock+0x8c>)
 8001920:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001924:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <SetSysClock+0x8c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a18      	ldr	r2, [pc, #96]	; (800198c <SetSysClock+0x8c>)
 800192c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001930:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <SetSysClock+0x8c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <SetSysClock+0x8c>)
 8001938:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 800193c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <SetSysClock+0x8c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <SetSysClock+0x8c>)
 8001944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001948:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800194a:	bf00      	nop
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <SetSysClock+0x8c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f9      	beq.n	800194c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <SetSysClock+0x8c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <SetSysClock+0x8c>)
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <SetSysClock+0x8c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a08      	ldr	r2, [pc, #32]	; (800198c <SetSysClock+0x8c>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001970:	bf00      	nop
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <SetSysClock+0x8c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d1f9      	bne.n	8001972 <SetSysClock+0x72>
  {
  }
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40022000 	.word	0x40022000
 800198c:	40021000 	.word	0x40021000

08001990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001992:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001996:	490e      	ldr	r1, [pc, #56]	; (80019d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <LoopForever+0xe>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ac:	4c0b      	ldr	r4, [pc, #44]	; (80019dc <LoopForever+0x16>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019ba:	f7ff ff57 	bl	800186c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019be:	f000 f817 	bl	80019f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019c2:	f7ff fd75 	bl	80014b0 <main>

080019c6 <LoopForever>:

LoopForever:
    b LoopForever
 80019c6:	e7fe      	b.n	80019c6 <LoopForever>
  ldr   r0, =_estack
 80019c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80019d4:	08002b6c 	.word	0x08002b6c
  ldr r2, =_sbss
 80019d8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80019dc:	200001c4 	.word	0x200001c4

080019e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC1_2_IRQHandler>
	...

080019e4 <__errno>:
 80019e4:	4b01      	ldr	r3, [pc, #4]	; (80019ec <__errno+0x8>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000002c 	.word	0x2000002c

080019f0 <__libc_init_array>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	4e0d      	ldr	r6, [pc, #52]	; (8001a28 <__libc_init_array+0x38>)
 80019f4:	4c0d      	ldr	r4, [pc, #52]	; (8001a2c <__libc_init_array+0x3c>)
 80019f6:	1ba4      	subs	r4, r4, r6
 80019f8:	10a4      	asrs	r4, r4, #2
 80019fa:	2500      	movs	r5, #0
 80019fc:	42a5      	cmp	r5, r4
 80019fe:	d109      	bne.n	8001a14 <__libc_init_array+0x24>
 8001a00:	4e0b      	ldr	r6, [pc, #44]	; (8001a30 <__libc_init_array+0x40>)
 8001a02:	4c0c      	ldr	r4, [pc, #48]	; (8001a34 <__libc_init_array+0x44>)
 8001a04:	f001 f814 	bl	8002a30 <_init>
 8001a08:	1ba4      	subs	r4, r4, r6
 8001a0a:	10a4      	asrs	r4, r4, #2
 8001a0c:	2500      	movs	r5, #0
 8001a0e:	42a5      	cmp	r5, r4
 8001a10:	d105      	bne.n	8001a1e <__libc_init_array+0x2e>
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a18:	4798      	blx	r3
 8001a1a:	3501      	adds	r5, #1
 8001a1c:	e7ee      	b.n	80019fc <__libc_init_array+0xc>
 8001a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a22:	4798      	blx	r3
 8001a24:	3501      	adds	r5, #1
 8001a26:	e7f2      	b.n	8001a0e <__libc_init_array+0x1e>
 8001a28:	08002b64 	.word	0x08002b64
 8001a2c:	08002b64 	.word	0x08002b64
 8001a30:	08002b64 	.word	0x08002b64
 8001a34:	08002b68 	.word	0x08002b68

08001a38 <malloc>:
 8001a38:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <malloc+0xc>)
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	f000 b859 	b.w	8001af4 <_malloc_r>
 8001a42:	bf00      	nop
 8001a44:	2000002c 	.word	0x2000002c

08001a48 <memset>:
 8001a48:	4402      	add	r2, r0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <memset+0xa>
 8001a50:	4770      	bx	lr
 8001a52:	f803 1b01 	strb.w	r1, [r3], #1
 8001a56:	e7f9      	b.n	8001a4c <memset+0x4>

08001a58 <_free_r>:
 8001a58:	b538      	push	{r3, r4, r5, lr}
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	2900      	cmp	r1, #0
 8001a5e:	d045      	beq.n	8001aec <_free_r+0x94>
 8001a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a64:	1f0c      	subs	r4, r1, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bfb8      	it	lt
 8001a6a:	18e4      	addlt	r4, r4, r3
 8001a6c:	f000 fc7c 	bl	8002368 <__malloc_lock>
 8001a70:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <_free_r+0x98>)
 8001a72:	6813      	ldr	r3, [r2, #0]
 8001a74:	4610      	mov	r0, r2
 8001a76:	b933      	cbnz	r3, 8001a86 <_free_r+0x2e>
 8001a78:	6063      	str	r3, [r4, #4]
 8001a7a:	6014      	str	r4, [r2, #0]
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a82:	f000 bc72 	b.w	800236a <__malloc_unlock>
 8001a86:	42a3      	cmp	r3, r4
 8001a88:	d90c      	bls.n	8001aa4 <_free_r+0x4c>
 8001a8a:	6821      	ldr	r1, [r4, #0]
 8001a8c:	1862      	adds	r2, r4, r1
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	bf04      	itt	eq
 8001a92:	681a      	ldreq	r2, [r3, #0]
 8001a94:	685b      	ldreq	r3, [r3, #4]
 8001a96:	6063      	str	r3, [r4, #4]
 8001a98:	bf04      	itt	eq
 8001a9a:	1852      	addeq	r2, r2, r1
 8001a9c:	6022      	streq	r2, [r4, #0]
 8001a9e:	6004      	str	r4, [r0, #0]
 8001aa0:	e7ec      	b.n	8001a7c <_free_r+0x24>
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	b10a      	cbz	r2, 8001aac <_free_r+0x54>
 8001aa8:	42a2      	cmp	r2, r4
 8001aaa:	d9fa      	bls.n	8001aa2 <_free_r+0x4a>
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	1858      	adds	r0, r3, r1
 8001ab0:	42a0      	cmp	r0, r4
 8001ab2:	d10b      	bne.n	8001acc <_free_r+0x74>
 8001ab4:	6820      	ldr	r0, [r4, #0]
 8001ab6:	4401      	add	r1, r0
 8001ab8:	1858      	adds	r0, r3, r1
 8001aba:	4282      	cmp	r2, r0
 8001abc:	6019      	str	r1, [r3, #0]
 8001abe:	d1dd      	bne.n	8001a7c <_free_r+0x24>
 8001ac0:	6810      	ldr	r0, [r2, #0]
 8001ac2:	6852      	ldr	r2, [r2, #4]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	4401      	add	r1, r0
 8001ac8:	6019      	str	r1, [r3, #0]
 8001aca:	e7d7      	b.n	8001a7c <_free_r+0x24>
 8001acc:	d902      	bls.n	8001ad4 <_free_r+0x7c>
 8001ace:	230c      	movs	r3, #12
 8001ad0:	602b      	str	r3, [r5, #0]
 8001ad2:	e7d3      	b.n	8001a7c <_free_r+0x24>
 8001ad4:	6820      	ldr	r0, [r4, #0]
 8001ad6:	1821      	adds	r1, r4, r0
 8001ad8:	428a      	cmp	r2, r1
 8001ada:	bf04      	itt	eq
 8001adc:	6811      	ldreq	r1, [r2, #0]
 8001ade:	6852      	ldreq	r2, [r2, #4]
 8001ae0:	6062      	str	r2, [r4, #4]
 8001ae2:	bf04      	itt	eq
 8001ae4:	1809      	addeq	r1, r1, r0
 8001ae6:	6021      	streq	r1, [r4, #0]
 8001ae8:	605c      	str	r4, [r3, #4]
 8001aea:	e7c7      	b.n	8001a7c <_free_r+0x24>
 8001aec:	bd38      	pop	{r3, r4, r5, pc}
 8001aee:	bf00      	nop
 8001af0:	200001b8 	.word	0x200001b8

08001af4 <_malloc_r>:
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	1ccd      	adds	r5, r1, #3
 8001af8:	f025 0503 	bic.w	r5, r5, #3
 8001afc:	3508      	adds	r5, #8
 8001afe:	2d0c      	cmp	r5, #12
 8001b00:	bf38      	it	cc
 8001b02:	250c      	movcc	r5, #12
 8001b04:	2d00      	cmp	r5, #0
 8001b06:	4606      	mov	r6, r0
 8001b08:	db01      	blt.n	8001b0e <_malloc_r+0x1a>
 8001b0a:	42a9      	cmp	r1, r5
 8001b0c:	d903      	bls.n	8001b16 <_malloc_r+0x22>
 8001b0e:	230c      	movs	r3, #12
 8001b10:	6033      	str	r3, [r6, #0]
 8001b12:	2000      	movs	r0, #0
 8001b14:	bd70      	pop	{r4, r5, r6, pc}
 8001b16:	f000 fc27 	bl	8002368 <__malloc_lock>
 8001b1a:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <_malloc_r+0xac>)
 8001b1c:	6814      	ldr	r4, [r2, #0]
 8001b1e:	4621      	mov	r1, r4
 8001b20:	b991      	cbnz	r1, 8001b48 <_malloc_r+0x54>
 8001b22:	4c20      	ldr	r4, [pc, #128]	; (8001ba4 <_malloc_r+0xb0>)
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	b91b      	cbnz	r3, 8001b30 <_malloc_r+0x3c>
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f000 f8b9 	bl	8001ca0 <_sbrk_r>
 8001b2e:	6020      	str	r0, [r4, #0]
 8001b30:	4629      	mov	r1, r5
 8001b32:	4630      	mov	r0, r6
 8001b34:	f000 f8b4 	bl	8001ca0 <_sbrk_r>
 8001b38:	1c43      	adds	r3, r0, #1
 8001b3a:	d124      	bne.n	8001b86 <_malloc_r+0x92>
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	6033      	str	r3, [r6, #0]
 8001b40:	4630      	mov	r0, r6
 8001b42:	f000 fc12 	bl	800236a <__malloc_unlock>
 8001b46:	e7e4      	b.n	8001b12 <_malloc_r+0x1e>
 8001b48:	680b      	ldr	r3, [r1, #0]
 8001b4a:	1b5b      	subs	r3, r3, r5
 8001b4c:	d418      	bmi.n	8001b80 <_malloc_r+0x8c>
 8001b4e:	2b0b      	cmp	r3, #11
 8001b50:	d90f      	bls.n	8001b72 <_malloc_r+0x7e>
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	50cd      	str	r5, [r1, r3]
 8001b56:	18cc      	adds	r4, r1, r3
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f000 fc06 	bl	800236a <__malloc_unlock>
 8001b5e:	f104 000b 	add.w	r0, r4, #11
 8001b62:	1d23      	adds	r3, r4, #4
 8001b64:	f020 0007 	bic.w	r0, r0, #7
 8001b68:	1ac3      	subs	r3, r0, r3
 8001b6a:	d0d3      	beq.n	8001b14 <_malloc_r+0x20>
 8001b6c:	425a      	negs	r2, r3
 8001b6e:	50e2      	str	r2, [r4, r3]
 8001b70:	e7d0      	b.n	8001b14 <_malloc_r+0x20>
 8001b72:	428c      	cmp	r4, r1
 8001b74:	684b      	ldr	r3, [r1, #4]
 8001b76:	bf16      	itet	ne
 8001b78:	6063      	strne	r3, [r4, #4]
 8001b7a:	6013      	streq	r3, [r2, #0]
 8001b7c:	460c      	movne	r4, r1
 8001b7e:	e7eb      	b.n	8001b58 <_malloc_r+0x64>
 8001b80:	460c      	mov	r4, r1
 8001b82:	6849      	ldr	r1, [r1, #4]
 8001b84:	e7cc      	b.n	8001b20 <_malloc_r+0x2c>
 8001b86:	1cc4      	adds	r4, r0, #3
 8001b88:	f024 0403 	bic.w	r4, r4, #3
 8001b8c:	42a0      	cmp	r0, r4
 8001b8e:	d005      	beq.n	8001b9c <_malloc_r+0xa8>
 8001b90:	1a21      	subs	r1, r4, r0
 8001b92:	4630      	mov	r0, r6
 8001b94:	f000 f884 	bl	8001ca0 <_sbrk_r>
 8001b98:	3001      	adds	r0, #1
 8001b9a:	d0cf      	beq.n	8001b3c <_malloc_r+0x48>
 8001b9c:	6025      	str	r5, [r4, #0]
 8001b9e:	e7db      	b.n	8001b58 <_malloc_r+0x64>
 8001ba0:	200001b8 	.word	0x200001b8
 8001ba4:	200001bc 	.word	0x200001bc

08001ba8 <iprintf>:
 8001ba8:	b40f      	push	{r0, r1, r2, r3}
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <iprintf+0x2c>)
 8001bac:	b513      	push	{r0, r1, r4, lr}
 8001bae:	681c      	ldr	r4, [r3, #0]
 8001bb0:	b124      	cbz	r4, 8001bbc <iprintf+0x14>
 8001bb2:	69a3      	ldr	r3, [r4, #24]
 8001bb4:	b913      	cbnz	r3, 8001bbc <iprintf+0x14>
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f000 fae8 	bl	800218c <__sinit>
 8001bbc:	ab05      	add	r3, sp, #20
 8001bbe:	9a04      	ldr	r2, [sp, #16]
 8001bc0:	68a1      	ldr	r1, [r4, #8]
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f000 fbfb 	bl	80023c0 <_vfiprintf_r>
 8001bca:	b002      	add	sp, #8
 8001bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bd0:	b004      	add	sp, #16
 8001bd2:	4770      	bx	lr
 8001bd4:	2000002c 	.word	0x2000002c

08001bd8 <_puts_r>:
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	460e      	mov	r6, r1
 8001bdc:	4605      	mov	r5, r0
 8001bde:	b118      	cbz	r0, 8001be8 <_puts_r+0x10>
 8001be0:	6983      	ldr	r3, [r0, #24]
 8001be2:	b90b      	cbnz	r3, 8001be8 <_puts_r+0x10>
 8001be4:	f000 fad2 	bl	800218c <__sinit>
 8001be8:	69ab      	ldr	r3, [r5, #24]
 8001bea:	68ac      	ldr	r4, [r5, #8]
 8001bec:	b913      	cbnz	r3, 8001bf4 <_puts_r+0x1c>
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f000 facc 	bl	800218c <__sinit>
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <_puts_r+0xac>)
 8001bf6:	429c      	cmp	r4, r3
 8001bf8:	d117      	bne.n	8001c2a <_puts_r+0x52>
 8001bfa:	686c      	ldr	r4, [r5, #4]
 8001bfc:	89a3      	ldrh	r3, [r4, #12]
 8001bfe:	071b      	lsls	r3, r3, #28
 8001c00:	d51d      	bpl.n	8001c3e <_puts_r+0x66>
 8001c02:	6923      	ldr	r3, [r4, #16]
 8001c04:	b1db      	cbz	r3, 8001c3e <_puts_r+0x66>
 8001c06:	3e01      	subs	r6, #1
 8001c08:	68a3      	ldr	r3, [r4, #8]
 8001c0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	60a3      	str	r3, [r4, #8]
 8001c12:	b9e9      	cbnz	r1, 8001c50 <_puts_r+0x78>
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da2e      	bge.n	8001c76 <_puts_r+0x9e>
 8001c18:	4622      	mov	r2, r4
 8001c1a:	210a      	movs	r1, #10
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f000 f905 	bl	8001e2c <__swbuf_r>
 8001c22:	3001      	adds	r0, #1
 8001c24:	d011      	beq.n	8001c4a <_puts_r+0x72>
 8001c26:	200a      	movs	r0, #10
 8001c28:	e011      	b.n	8001c4e <_puts_r+0x76>
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <_puts_r+0xb0>)
 8001c2c:	429c      	cmp	r4, r3
 8001c2e:	d101      	bne.n	8001c34 <_puts_r+0x5c>
 8001c30:	68ac      	ldr	r4, [r5, #8]
 8001c32:	e7e3      	b.n	8001bfc <_puts_r+0x24>
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_puts_r+0xb4>)
 8001c36:	429c      	cmp	r4, r3
 8001c38:	bf08      	it	eq
 8001c3a:	68ec      	ldreq	r4, [r5, #12]
 8001c3c:	e7de      	b.n	8001bfc <_puts_r+0x24>
 8001c3e:	4621      	mov	r1, r4
 8001c40:	4628      	mov	r0, r5
 8001c42:	f000 f945 	bl	8001ed0 <__swsetup_r>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d0dd      	beq.n	8001c06 <_puts_r+0x2e>
 8001c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	da04      	bge.n	8001c5e <_puts_r+0x86>
 8001c54:	69a2      	ldr	r2, [r4, #24]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dc06      	bgt.n	8001c68 <_puts_r+0x90>
 8001c5a:	290a      	cmp	r1, #10
 8001c5c:	d004      	beq.n	8001c68 <_puts_r+0x90>
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	6022      	str	r2, [r4, #0]
 8001c64:	7019      	strb	r1, [r3, #0]
 8001c66:	e7cf      	b.n	8001c08 <_puts_r+0x30>
 8001c68:	4622      	mov	r2, r4
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	f000 f8de 	bl	8001e2c <__swbuf_r>
 8001c70:	3001      	adds	r0, #1
 8001c72:	d1c9      	bne.n	8001c08 <_puts_r+0x30>
 8001c74:	e7e9      	b.n	8001c4a <_puts_r+0x72>
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	200a      	movs	r0, #10
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	6022      	str	r2, [r4, #0]
 8001c7e:	7018      	strb	r0, [r3, #0]
 8001c80:	e7e5      	b.n	8001c4e <_puts_r+0x76>
 8001c82:	bf00      	nop
 8001c84:	08002af0 	.word	0x08002af0
 8001c88:	08002b10 	.word	0x08002b10
 8001c8c:	08002ad0 	.word	0x08002ad0

08001c90 <puts>:
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <puts+0xc>)
 8001c92:	4601      	mov	r1, r0
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f7ff bf9f 	b.w	8001bd8 <_puts_r>
 8001c9a:	bf00      	nop
 8001c9c:	2000002c 	.word	0x2000002c

08001ca0 <_sbrk_r>:
 8001ca0:	b538      	push	{r3, r4, r5, lr}
 8001ca2:	4c06      	ldr	r4, [pc, #24]	; (8001cbc <_sbrk_r+0x1c>)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4605      	mov	r5, r0
 8001ca8:	4608      	mov	r0, r1
 8001caa:	6023      	str	r3, [r4, #0]
 8001cac:	f7ff fdb2 	bl	8001814 <_sbrk>
 8001cb0:	1c43      	adds	r3, r0, #1
 8001cb2:	d102      	bne.n	8001cba <_sbrk_r+0x1a>
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	b103      	cbz	r3, 8001cba <_sbrk_r+0x1a>
 8001cb8:	602b      	str	r3, [r5, #0]
 8001cba:	bd38      	pop	{r3, r4, r5, pc}
 8001cbc:	200001c0 	.word	0x200001c0

08001cc0 <setbuf>:
 8001cc0:	2900      	cmp	r1, #0
 8001cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2202      	moveq	r2, #2
 8001cca:	2200      	movne	r2, #0
 8001ccc:	f000 b800 	b.w	8001cd0 <setvbuf>

08001cd0 <setvbuf>:
 8001cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001cd4:	461d      	mov	r5, r3
 8001cd6:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <setvbuf+0x14c>)
 8001cd8:	681e      	ldr	r6, [r3, #0]
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460f      	mov	r7, r1
 8001cde:	4690      	mov	r8, r2
 8001ce0:	b126      	cbz	r6, 8001cec <setvbuf+0x1c>
 8001ce2:	69b3      	ldr	r3, [r6, #24]
 8001ce4:	b913      	cbnz	r3, 8001cec <setvbuf+0x1c>
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f000 fa50 	bl	800218c <__sinit>
 8001cec:	4b4c      	ldr	r3, [pc, #304]	; (8001e20 <setvbuf+0x150>)
 8001cee:	429c      	cmp	r4, r3
 8001cf0:	d152      	bne.n	8001d98 <setvbuf+0xc8>
 8001cf2:	6874      	ldr	r4, [r6, #4]
 8001cf4:	f1b8 0f02 	cmp.w	r8, #2
 8001cf8:	d006      	beq.n	8001d08 <setvbuf+0x38>
 8001cfa:	f1b8 0f01 	cmp.w	r8, #1
 8001cfe:	f200 8089 	bhi.w	8001e14 <setvbuf+0x144>
 8001d02:	2d00      	cmp	r5, #0
 8001d04:	f2c0 8086 	blt.w	8001e14 <setvbuf+0x144>
 8001d08:	4621      	mov	r1, r4
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f000 f9d4 	bl	80020b8 <_fflush_r>
 8001d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d12:	b141      	cbz	r1, 8001d26 <setvbuf+0x56>
 8001d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d18:	4299      	cmp	r1, r3
 8001d1a:	d002      	beq.n	8001d22 <setvbuf+0x52>
 8001d1c:	4630      	mov	r0, r6
 8001d1e:	f7ff fe9b 	bl	8001a58 <_free_r>
 8001d22:	2300      	movs	r3, #0
 8001d24:	6363      	str	r3, [r4, #52]	; 0x34
 8001d26:	2300      	movs	r3, #0
 8001d28:	61a3      	str	r3, [r4, #24]
 8001d2a:	6063      	str	r3, [r4, #4]
 8001d2c:	89a3      	ldrh	r3, [r4, #12]
 8001d2e:	061b      	lsls	r3, r3, #24
 8001d30:	d503      	bpl.n	8001d3a <setvbuf+0x6a>
 8001d32:	6921      	ldr	r1, [r4, #16]
 8001d34:	4630      	mov	r0, r6
 8001d36:	f7ff fe8f 	bl	8001a58 <_free_r>
 8001d3a:	89a3      	ldrh	r3, [r4, #12]
 8001d3c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001d40:	f023 0303 	bic.w	r3, r3, #3
 8001d44:	f1b8 0f02 	cmp.w	r8, #2
 8001d48:	81a3      	strh	r3, [r4, #12]
 8001d4a:	d05d      	beq.n	8001e08 <setvbuf+0x138>
 8001d4c:	ab01      	add	r3, sp, #4
 8001d4e:	466a      	mov	r2, sp
 8001d50:	4621      	mov	r1, r4
 8001d52:	4630      	mov	r0, r6
 8001d54:	f000 faa4 	bl	80022a0 <__swhatbuf_r>
 8001d58:	89a3      	ldrh	r3, [r4, #12]
 8001d5a:	4318      	orrs	r0, r3
 8001d5c:	81a0      	strh	r0, [r4, #12]
 8001d5e:	bb2d      	cbnz	r5, 8001dac <setvbuf+0xdc>
 8001d60:	9d00      	ldr	r5, [sp, #0]
 8001d62:	4628      	mov	r0, r5
 8001d64:	f7ff fe68 	bl	8001a38 <malloc>
 8001d68:	4607      	mov	r7, r0
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d14e      	bne.n	8001e0c <setvbuf+0x13c>
 8001d6e:	f8dd 9000 	ldr.w	r9, [sp]
 8001d72:	45a9      	cmp	r9, r5
 8001d74:	d13c      	bne.n	8001df0 <setvbuf+0x120>
 8001d76:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7a:	89a3      	ldrh	r3, [r4, #12]
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	81a3      	strh	r3, [r4, #12]
 8001d82:	2300      	movs	r3, #0
 8001d84:	60a3      	str	r3, [r4, #8]
 8001d86:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d8a:	6023      	str	r3, [r4, #0]
 8001d8c:	6123      	str	r3, [r4, #16]
 8001d8e:	2301      	movs	r3, #1
 8001d90:	6163      	str	r3, [r4, #20]
 8001d92:	b003      	add	sp, #12
 8001d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <setvbuf+0x154>)
 8001d9a:	429c      	cmp	r4, r3
 8001d9c:	d101      	bne.n	8001da2 <setvbuf+0xd2>
 8001d9e:	68b4      	ldr	r4, [r6, #8]
 8001da0:	e7a8      	b.n	8001cf4 <setvbuf+0x24>
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <setvbuf+0x158>)
 8001da4:	429c      	cmp	r4, r3
 8001da6:	bf08      	it	eq
 8001da8:	68f4      	ldreq	r4, [r6, #12]
 8001daa:	e7a3      	b.n	8001cf4 <setvbuf+0x24>
 8001dac:	2f00      	cmp	r7, #0
 8001dae:	d0d8      	beq.n	8001d62 <setvbuf+0x92>
 8001db0:	69b3      	ldr	r3, [r6, #24]
 8001db2:	b913      	cbnz	r3, 8001dba <setvbuf+0xea>
 8001db4:	4630      	mov	r0, r6
 8001db6:	f000 f9e9 	bl	800218c <__sinit>
 8001dba:	f1b8 0f01 	cmp.w	r8, #1
 8001dbe:	bf08      	it	eq
 8001dc0:	89a3      	ldrheq	r3, [r4, #12]
 8001dc2:	6027      	str	r7, [r4, #0]
 8001dc4:	bf04      	itt	eq
 8001dc6:	f043 0301 	orreq.w	r3, r3, #1
 8001dca:	81a3      	strheq	r3, [r4, #12]
 8001dcc:	89a3      	ldrh	r3, [r4, #12]
 8001dce:	f013 0008 	ands.w	r0, r3, #8
 8001dd2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8001dd6:	d01b      	beq.n	8001e10 <setvbuf+0x140>
 8001dd8:	f013 0001 	ands.w	r0, r3, #1
 8001ddc:	bf18      	it	ne
 8001dde:	426d      	negne	r5, r5
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	bf1d      	ittte	ne
 8001de6:	60a3      	strne	r3, [r4, #8]
 8001de8:	61a5      	strne	r5, [r4, #24]
 8001dea:	4618      	movne	r0, r3
 8001dec:	60a5      	streq	r5, [r4, #8]
 8001dee:	e7d0      	b.n	8001d92 <setvbuf+0xc2>
 8001df0:	4648      	mov	r0, r9
 8001df2:	f7ff fe21 	bl	8001a38 <malloc>
 8001df6:	4607      	mov	r7, r0
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	d0bc      	beq.n	8001d76 <setvbuf+0xa6>
 8001dfc:	89a3      	ldrh	r3, [r4, #12]
 8001dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e02:	81a3      	strh	r3, [r4, #12]
 8001e04:	464d      	mov	r5, r9
 8001e06:	e7d3      	b.n	8001db0 <setvbuf+0xe0>
 8001e08:	2000      	movs	r0, #0
 8001e0a:	e7b6      	b.n	8001d7a <setvbuf+0xaa>
 8001e0c:	46a9      	mov	r9, r5
 8001e0e:	e7f5      	b.n	8001dfc <setvbuf+0x12c>
 8001e10:	60a0      	str	r0, [r4, #8]
 8001e12:	e7be      	b.n	8001d92 <setvbuf+0xc2>
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	e7bb      	b.n	8001d92 <setvbuf+0xc2>
 8001e1a:	bf00      	nop
 8001e1c:	2000002c 	.word	0x2000002c
 8001e20:	08002af0 	.word	0x08002af0
 8001e24:	08002b10 	.word	0x08002b10
 8001e28:	08002ad0 	.word	0x08002ad0

08001e2c <__swbuf_r>:
 8001e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2e:	460e      	mov	r6, r1
 8001e30:	4614      	mov	r4, r2
 8001e32:	4605      	mov	r5, r0
 8001e34:	b118      	cbz	r0, 8001e3e <__swbuf_r+0x12>
 8001e36:	6983      	ldr	r3, [r0, #24]
 8001e38:	b90b      	cbnz	r3, 8001e3e <__swbuf_r+0x12>
 8001e3a:	f000 f9a7 	bl	800218c <__sinit>
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <__swbuf_r+0x98>)
 8001e40:	429c      	cmp	r4, r3
 8001e42:	d12a      	bne.n	8001e9a <__swbuf_r+0x6e>
 8001e44:	686c      	ldr	r4, [r5, #4]
 8001e46:	69a3      	ldr	r3, [r4, #24]
 8001e48:	60a3      	str	r3, [r4, #8]
 8001e4a:	89a3      	ldrh	r3, [r4, #12]
 8001e4c:	071a      	lsls	r2, r3, #28
 8001e4e:	d52e      	bpl.n	8001eae <__swbuf_r+0x82>
 8001e50:	6923      	ldr	r3, [r4, #16]
 8001e52:	b363      	cbz	r3, 8001eae <__swbuf_r+0x82>
 8001e54:	6923      	ldr	r3, [r4, #16]
 8001e56:	6820      	ldr	r0, [r4, #0]
 8001e58:	1ac0      	subs	r0, r0, r3
 8001e5a:	6963      	ldr	r3, [r4, #20]
 8001e5c:	b2f6      	uxtb	r6, r6
 8001e5e:	4283      	cmp	r3, r0
 8001e60:	4637      	mov	r7, r6
 8001e62:	dc04      	bgt.n	8001e6e <__swbuf_r+0x42>
 8001e64:	4621      	mov	r1, r4
 8001e66:	4628      	mov	r0, r5
 8001e68:	f000 f926 	bl	80020b8 <_fflush_r>
 8001e6c:	bb28      	cbnz	r0, 8001eba <__swbuf_r+0x8e>
 8001e6e:	68a3      	ldr	r3, [r4, #8]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	60a3      	str	r3, [r4, #8]
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	6022      	str	r2, [r4, #0]
 8001e7a:	701e      	strb	r6, [r3, #0]
 8001e7c:	6963      	ldr	r3, [r4, #20]
 8001e7e:	3001      	adds	r0, #1
 8001e80:	4283      	cmp	r3, r0
 8001e82:	d004      	beq.n	8001e8e <__swbuf_r+0x62>
 8001e84:	89a3      	ldrh	r3, [r4, #12]
 8001e86:	07db      	lsls	r3, r3, #31
 8001e88:	d519      	bpl.n	8001ebe <__swbuf_r+0x92>
 8001e8a:	2e0a      	cmp	r6, #10
 8001e8c:	d117      	bne.n	8001ebe <__swbuf_r+0x92>
 8001e8e:	4621      	mov	r1, r4
 8001e90:	4628      	mov	r0, r5
 8001e92:	f000 f911 	bl	80020b8 <_fflush_r>
 8001e96:	b190      	cbz	r0, 8001ebe <__swbuf_r+0x92>
 8001e98:	e00f      	b.n	8001eba <__swbuf_r+0x8e>
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <__swbuf_r+0x9c>)
 8001e9c:	429c      	cmp	r4, r3
 8001e9e:	d101      	bne.n	8001ea4 <__swbuf_r+0x78>
 8001ea0:	68ac      	ldr	r4, [r5, #8]
 8001ea2:	e7d0      	b.n	8001e46 <__swbuf_r+0x1a>
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <__swbuf_r+0xa0>)
 8001ea6:	429c      	cmp	r4, r3
 8001ea8:	bf08      	it	eq
 8001eaa:	68ec      	ldreq	r4, [r5, #12]
 8001eac:	e7cb      	b.n	8001e46 <__swbuf_r+0x1a>
 8001eae:	4621      	mov	r1, r4
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	f000 f80d 	bl	8001ed0 <__swsetup_r>
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	d0cc      	beq.n	8001e54 <__swbuf_r+0x28>
 8001eba:	f04f 37ff 	mov.w	r7, #4294967295
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	08002af0 	.word	0x08002af0
 8001ec8:	08002b10 	.word	0x08002b10
 8001ecc:	08002ad0 	.word	0x08002ad0

08001ed0 <__swsetup_r>:
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <__swsetup_r+0xcc>)
 8001ed2:	b570      	push	{r4, r5, r6, lr}
 8001ed4:	681d      	ldr	r5, [r3, #0]
 8001ed6:	4606      	mov	r6, r0
 8001ed8:	460c      	mov	r4, r1
 8001eda:	b125      	cbz	r5, 8001ee6 <__swsetup_r+0x16>
 8001edc:	69ab      	ldr	r3, [r5, #24]
 8001ede:	b913      	cbnz	r3, 8001ee6 <__swsetup_r+0x16>
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	f000 f953 	bl	800218c <__sinit>
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <__swsetup_r+0xd0>)
 8001ee8:	429c      	cmp	r4, r3
 8001eea:	d10f      	bne.n	8001f0c <__swsetup_r+0x3c>
 8001eec:	686c      	ldr	r4, [r5, #4]
 8001eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	0715      	lsls	r5, r2, #28
 8001ef6:	d42c      	bmi.n	8001f52 <__swsetup_r+0x82>
 8001ef8:	06d0      	lsls	r0, r2, #27
 8001efa:	d411      	bmi.n	8001f20 <__swsetup_r+0x50>
 8001efc:	2209      	movs	r2, #9
 8001efe:	6032      	str	r2, [r6, #0]
 8001f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f04:	81a3      	strh	r3, [r4, #12]
 8001f06:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0a:	e03e      	b.n	8001f8a <__swsetup_r+0xba>
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <__swsetup_r+0xd4>)
 8001f0e:	429c      	cmp	r4, r3
 8001f10:	d101      	bne.n	8001f16 <__swsetup_r+0x46>
 8001f12:	68ac      	ldr	r4, [r5, #8]
 8001f14:	e7eb      	b.n	8001eee <__swsetup_r+0x1e>
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <__swsetup_r+0xd8>)
 8001f18:	429c      	cmp	r4, r3
 8001f1a:	bf08      	it	eq
 8001f1c:	68ec      	ldreq	r4, [r5, #12]
 8001f1e:	e7e6      	b.n	8001eee <__swsetup_r+0x1e>
 8001f20:	0751      	lsls	r1, r2, #29
 8001f22:	d512      	bpl.n	8001f4a <__swsetup_r+0x7a>
 8001f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f26:	b141      	cbz	r1, 8001f3a <__swsetup_r+0x6a>
 8001f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f2c:	4299      	cmp	r1, r3
 8001f2e:	d002      	beq.n	8001f36 <__swsetup_r+0x66>
 8001f30:	4630      	mov	r0, r6
 8001f32:	f7ff fd91 	bl	8001a58 <_free_r>
 8001f36:	2300      	movs	r3, #0
 8001f38:	6363      	str	r3, [r4, #52]	; 0x34
 8001f3a:	89a3      	ldrh	r3, [r4, #12]
 8001f3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f40:	81a3      	strh	r3, [r4, #12]
 8001f42:	2300      	movs	r3, #0
 8001f44:	6063      	str	r3, [r4, #4]
 8001f46:	6923      	ldr	r3, [r4, #16]
 8001f48:	6023      	str	r3, [r4, #0]
 8001f4a:	89a3      	ldrh	r3, [r4, #12]
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	81a3      	strh	r3, [r4, #12]
 8001f52:	6923      	ldr	r3, [r4, #16]
 8001f54:	b94b      	cbnz	r3, 8001f6a <__swsetup_r+0x9a>
 8001f56:	89a3      	ldrh	r3, [r4, #12]
 8001f58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f60:	d003      	beq.n	8001f6a <__swsetup_r+0x9a>
 8001f62:	4621      	mov	r1, r4
 8001f64:	4630      	mov	r0, r6
 8001f66:	f000 f9bf 	bl	80022e8 <__smakebuf_r>
 8001f6a:	89a2      	ldrh	r2, [r4, #12]
 8001f6c:	f012 0301 	ands.w	r3, r2, #1
 8001f70:	d00c      	beq.n	8001f8c <__swsetup_r+0xbc>
 8001f72:	2300      	movs	r3, #0
 8001f74:	60a3      	str	r3, [r4, #8]
 8001f76:	6963      	ldr	r3, [r4, #20]
 8001f78:	425b      	negs	r3, r3
 8001f7a:	61a3      	str	r3, [r4, #24]
 8001f7c:	6923      	ldr	r3, [r4, #16]
 8001f7e:	b953      	cbnz	r3, 8001f96 <__swsetup_r+0xc6>
 8001f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001f88:	d1ba      	bne.n	8001f00 <__swsetup_r+0x30>
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
 8001f8c:	0792      	lsls	r2, r2, #30
 8001f8e:	bf58      	it	pl
 8001f90:	6963      	ldrpl	r3, [r4, #20]
 8001f92:	60a3      	str	r3, [r4, #8]
 8001f94:	e7f2      	b.n	8001f7c <__swsetup_r+0xac>
 8001f96:	2000      	movs	r0, #0
 8001f98:	e7f7      	b.n	8001f8a <__swsetup_r+0xba>
 8001f9a:	bf00      	nop
 8001f9c:	2000002c 	.word	0x2000002c
 8001fa0:	08002af0 	.word	0x08002af0
 8001fa4:	08002b10 	.word	0x08002b10
 8001fa8:	08002ad0 	.word	0x08002ad0

08001fac <__sflush_r>:
 8001fac:	898a      	ldrh	r2, [r1, #12]
 8001fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	0710      	lsls	r0, r2, #28
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	d458      	bmi.n	800206c <__sflush_r+0xc0>
 8001fba:	684b      	ldr	r3, [r1, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	dc05      	bgt.n	8001fcc <__sflush_r+0x20>
 8001fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	dc02      	bgt.n	8001fcc <__sflush_r+0x20>
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fce:	2e00      	cmp	r6, #0
 8001fd0:	d0f9      	beq.n	8001fc6 <__sflush_r+0x1a>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001fd8:	682f      	ldr	r7, [r5, #0]
 8001fda:	6a21      	ldr	r1, [r4, #32]
 8001fdc:	602b      	str	r3, [r5, #0]
 8001fde:	d032      	beq.n	8002046 <__sflush_r+0x9a>
 8001fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fe2:	89a3      	ldrh	r3, [r4, #12]
 8001fe4:	075a      	lsls	r2, r3, #29
 8001fe6:	d505      	bpl.n	8001ff4 <__sflush_r+0x48>
 8001fe8:	6863      	ldr	r3, [r4, #4]
 8001fea:	1ac0      	subs	r0, r0, r3
 8001fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fee:	b10b      	cbz	r3, 8001ff4 <__sflush_r+0x48>
 8001ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ff2:	1ac0      	subs	r0, r0, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ffa:	6a21      	ldr	r1, [r4, #32]
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	47b0      	blx	r6
 8002000:	1c43      	adds	r3, r0, #1
 8002002:	89a3      	ldrh	r3, [r4, #12]
 8002004:	d106      	bne.n	8002014 <__sflush_r+0x68>
 8002006:	6829      	ldr	r1, [r5, #0]
 8002008:	291d      	cmp	r1, #29
 800200a:	d848      	bhi.n	800209e <__sflush_r+0xf2>
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <__sflush_r+0x108>)
 800200e:	40ca      	lsrs	r2, r1
 8002010:	07d6      	lsls	r6, r2, #31
 8002012:	d544      	bpl.n	800209e <__sflush_r+0xf2>
 8002014:	2200      	movs	r2, #0
 8002016:	6062      	str	r2, [r4, #4]
 8002018:	04d9      	lsls	r1, r3, #19
 800201a:	6922      	ldr	r2, [r4, #16]
 800201c:	6022      	str	r2, [r4, #0]
 800201e:	d504      	bpl.n	800202a <__sflush_r+0x7e>
 8002020:	1c42      	adds	r2, r0, #1
 8002022:	d101      	bne.n	8002028 <__sflush_r+0x7c>
 8002024:	682b      	ldr	r3, [r5, #0]
 8002026:	b903      	cbnz	r3, 800202a <__sflush_r+0x7e>
 8002028:	6560      	str	r0, [r4, #84]	; 0x54
 800202a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800202c:	602f      	str	r7, [r5, #0]
 800202e:	2900      	cmp	r1, #0
 8002030:	d0c9      	beq.n	8001fc6 <__sflush_r+0x1a>
 8002032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002036:	4299      	cmp	r1, r3
 8002038:	d002      	beq.n	8002040 <__sflush_r+0x94>
 800203a:	4628      	mov	r0, r5
 800203c:	f7ff fd0c 	bl	8001a58 <_free_r>
 8002040:	2000      	movs	r0, #0
 8002042:	6360      	str	r0, [r4, #52]	; 0x34
 8002044:	e7c0      	b.n	8001fc8 <__sflush_r+0x1c>
 8002046:	2301      	movs	r3, #1
 8002048:	4628      	mov	r0, r5
 800204a:	47b0      	blx	r6
 800204c:	1c41      	adds	r1, r0, #1
 800204e:	d1c8      	bne.n	8001fe2 <__sflush_r+0x36>
 8002050:	682b      	ldr	r3, [r5, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0c5      	beq.n	8001fe2 <__sflush_r+0x36>
 8002056:	2b1d      	cmp	r3, #29
 8002058:	d001      	beq.n	800205e <__sflush_r+0xb2>
 800205a:	2b16      	cmp	r3, #22
 800205c:	d101      	bne.n	8002062 <__sflush_r+0xb6>
 800205e:	602f      	str	r7, [r5, #0]
 8002060:	e7b1      	b.n	8001fc6 <__sflush_r+0x1a>
 8002062:	89a3      	ldrh	r3, [r4, #12]
 8002064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002068:	81a3      	strh	r3, [r4, #12]
 800206a:	e7ad      	b.n	8001fc8 <__sflush_r+0x1c>
 800206c:	690f      	ldr	r7, [r1, #16]
 800206e:	2f00      	cmp	r7, #0
 8002070:	d0a9      	beq.n	8001fc6 <__sflush_r+0x1a>
 8002072:	0793      	lsls	r3, r2, #30
 8002074:	680e      	ldr	r6, [r1, #0]
 8002076:	bf08      	it	eq
 8002078:	694b      	ldreq	r3, [r1, #20]
 800207a:	600f      	str	r7, [r1, #0]
 800207c:	bf18      	it	ne
 800207e:	2300      	movne	r3, #0
 8002080:	eba6 0807 	sub.w	r8, r6, r7
 8002084:	608b      	str	r3, [r1, #8]
 8002086:	f1b8 0f00 	cmp.w	r8, #0
 800208a:	dd9c      	ble.n	8001fc6 <__sflush_r+0x1a>
 800208c:	4643      	mov	r3, r8
 800208e:	463a      	mov	r2, r7
 8002090:	6a21      	ldr	r1, [r4, #32]
 8002092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002094:	4628      	mov	r0, r5
 8002096:	47b0      	blx	r6
 8002098:	2800      	cmp	r0, #0
 800209a:	dc06      	bgt.n	80020aa <__sflush_r+0xfe>
 800209c:	89a3      	ldrh	r3, [r4, #12]
 800209e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a2:	81a3      	strh	r3, [r4, #12]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	e78e      	b.n	8001fc8 <__sflush_r+0x1c>
 80020aa:	4407      	add	r7, r0
 80020ac:	eba8 0800 	sub.w	r8, r8, r0
 80020b0:	e7e9      	b.n	8002086 <__sflush_r+0xda>
 80020b2:	bf00      	nop
 80020b4:	20400001 	.word	0x20400001

080020b8 <_fflush_r>:
 80020b8:	b538      	push	{r3, r4, r5, lr}
 80020ba:	690b      	ldr	r3, [r1, #16]
 80020bc:	4605      	mov	r5, r0
 80020be:	460c      	mov	r4, r1
 80020c0:	b1db      	cbz	r3, 80020fa <_fflush_r+0x42>
 80020c2:	b118      	cbz	r0, 80020cc <_fflush_r+0x14>
 80020c4:	6983      	ldr	r3, [r0, #24]
 80020c6:	b90b      	cbnz	r3, 80020cc <_fflush_r+0x14>
 80020c8:	f000 f860 	bl	800218c <__sinit>
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <_fflush_r+0x48>)
 80020ce:	429c      	cmp	r4, r3
 80020d0:	d109      	bne.n	80020e6 <_fflush_r+0x2e>
 80020d2:	686c      	ldr	r4, [r5, #4]
 80020d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020d8:	b17b      	cbz	r3, 80020fa <_fflush_r+0x42>
 80020da:	4621      	mov	r1, r4
 80020dc:	4628      	mov	r0, r5
 80020de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020e2:	f7ff bf63 	b.w	8001fac <__sflush_r>
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <_fflush_r+0x4c>)
 80020e8:	429c      	cmp	r4, r3
 80020ea:	d101      	bne.n	80020f0 <_fflush_r+0x38>
 80020ec:	68ac      	ldr	r4, [r5, #8]
 80020ee:	e7f1      	b.n	80020d4 <_fflush_r+0x1c>
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <_fflush_r+0x50>)
 80020f2:	429c      	cmp	r4, r3
 80020f4:	bf08      	it	eq
 80020f6:	68ec      	ldreq	r4, [r5, #12]
 80020f8:	e7ec      	b.n	80020d4 <_fflush_r+0x1c>
 80020fa:	2000      	movs	r0, #0
 80020fc:	bd38      	pop	{r3, r4, r5, pc}
 80020fe:	bf00      	nop
 8002100:	08002af0 	.word	0x08002af0
 8002104:	08002b10 	.word	0x08002b10
 8002108:	08002ad0 	.word	0x08002ad0

0800210c <std>:
 800210c:	2300      	movs	r3, #0
 800210e:	b510      	push	{r4, lr}
 8002110:	4604      	mov	r4, r0
 8002112:	e9c0 3300 	strd	r3, r3, [r0]
 8002116:	6083      	str	r3, [r0, #8]
 8002118:	8181      	strh	r1, [r0, #12]
 800211a:	6643      	str	r3, [r0, #100]	; 0x64
 800211c:	81c2      	strh	r2, [r0, #14]
 800211e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002122:	6183      	str	r3, [r0, #24]
 8002124:	4619      	mov	r1, r3
 8002126:	2208      	movs	r2, #8
 8002128:	305c      	adds	r0, #92	; 0x5c
 800212a:	f7ff fc8d 	bl	8001a48 <memset>
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <std+0x38>)
 8002130:	6263      	str	r3, [r4, #36]	; 0x24
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <std+0x3c>)
 8002134:	62a3      	str	r3, [r4, #40]	; 0x28
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <std+0x40>)
 8002138:	62e3      	str	r3, [r4, #44]	; 0x2c
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <std+0x44>)
 800213c:	6224      	str	r4, [r4, #32]
 800213e:	6323      	str	r3, [r4, #48]	; 0x30
 8002140:	bd10      	pop	{r4, pc}
 8002142:	bf00      	nop
 8002144:	080028fd 	.word	0x080028fd
 8002148:	0800291f 	.word	0x0800291f
 800214c:	08002957 	.word	0x08002957
 8002150:	0800297b 	.word	0x0800297b

08002154 <_cleanup_r>:
 8002154:	4901      	ldr	r1, [pc, #4]	; (800215c <_cleanup_r+0x8>)
 8002156:	f000 b885 	b.w	8002264 <_fwalk_reent>
 800215a:	bf00      	nop
 800215c:	080020b9 	.word	0x080020b9

08002160 <__sfmoreglue>:
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	1e4a      	subs	r2, r1, #1
 8002164:	2568      	movs	r5, #104	; 0x68
 8002166:	4355      	muls	r5, r2
 8002168:	460e      	mov	r6, r1
 800216a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800216e:	f7ff fcc1 	bl	8001af4 <_malloc_r>
 8002172:	4604      	mov	r4, r0
 8002174:	b140      	cbz	r0, 8002188 <__sfmoreglue+0x28>
 8002176:	2100      	movs	r1, #0
 8002178:	e9c0 1600 	strd	r1, r6, [r0]
 800217c:	300c      	adds	r0, #12
 800217e:	60a0      	str	r0, [r4, #8]
 8002180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002184:	f7ff fc60 	bl	8001a48 <memset>
 8002188:	4620      	mov	r0, r4
 800218a:	bd70      	pop	{r4, r5, r6, pc}

0800218c <__sinit>:
 800218c:	6983      	ldr	r3, [r0, #24]
 800218e:	b510      	push	{r4, lr}
 8002190:	4604      	mov	r4, r0
 8002192:	bb33      	cbnz	r3, 80021e2 <__sinit+0x56>
 8002194:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002198:	6503      	str	r3, [r0, #80]	; 0x50
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <__sinit+0x58>)
 800219c:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <__sinit+0x5c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6282      	str	r2, [r0, #40]	; 0x28
 80021a2:	4298      	cmp	r0, r3
 80021a4:	bf04      	itt	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	6183      	streq	r3, [r0, #24]
 80021aa:	f000 f81f 	bl	80021ec <__sfp>
 80021ae:	6060      	str	r0, [r4, #4]
 80021b0:	4620      	mov	r0, r4
 80021b2:	f000 f81b 	bl	80021ec <__sfp>
 80021b6:	60a0      	str	r0, [r4, #8]
 80021b8:	4620      	mov	r0, r4
 80021ba:	f000 f817 	bl	80021ec <__sfp>
 80021be:	2200      	movs	r2, #0
 80021c0:	60e0      	str	r0, [r4, #12]
 80021c2:	2104      	movs	r1, #4
 80021c4:	6860      	ldr	r0, [r4, #4]
 80021c6:	f7ff ffa1 	bl	800210c <std>
 80021ca:	2201      	movs	r2, #1
 80021cc:	2109      	movs	r1, #9
 80021ce:	68a0      	ldr	r0, [r4, #8]
 80021d0:	f7ff ff9c 	bl	800210c <std>
 80021d4:	2202      	movs	r2, #2
 80021d6:	2112      	movs	r1, #18
 80021d8:	68e0      	ldr	r0, [r4, #12]
 80021da:	f7ff ff97 	bl	800210c <std>
 80021de:	2301      	movs	r3, #1
 80021e0:	61a3      	str	r3, [r4, #24]
 80021e2:	bd10      	pop	{r4, pc}
 80021e4:	08002acc 	.word	0x08002acc
 80021e8:	08002155 	.word	0x08002155

080021ec <__sfp>:
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <__sfp+0x70>)
 80021f0:	681e      	ldr	r6, [r3, #0]
 80021f2:	69b3      	ldr	r3, [r6, #24]
 80021f4:	4607      	mov	r7, r0
 80021f6:	b913      	cbnz	r3, 80021fe <__sfp+0x12>
 80021f8:	4630      	mov	r0, r6
 80021fa:	f7ff ffc7 	bl	800218c <__sinit>
 80021fe:	3648      	adds	r6, #72	; 0x48
 8002200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002204:	3b01      	subs	r3, #1
 8002206:	d503      	bpl.n	8002210 <__sfp+0x24>
 8002208:	6833      	ldr	r3, [r6, #0]
 800220a:	b133      	cbz	r3, 800221a <__sfp+0x2e>
 800220c:	6836      	ldr	r6, [r6, #0]
 800220e:	e7f7      	b.n	8002200 <__sfp+0x14>
 8002210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002214:	b16d      	cbz	r5, 8002232 <__sfp+0x46>
 8002216:	3468      	adds	r4, #104	; 0x68
 8002218:	e7f4      	b.n	8002204 <__sfp+0x18>
 800221a:	2104      	movs	r1, #4
 800221c:	4638      	mov	r0, r7
 800221e:	f7ff ff9f 	bl	8002160 <__sfmoreglue>
 8002222:	6030      	str	r0, [r6, #0]
 8002224:	2800      	cmp	r0, #0
 8002226:	d1f1      	bne.n	800220c <__sfp+0x20>
 8002228:	230c      	movs	r3, #12
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	4604      	mov	r4, r0
 800222e:	4620      	mov	r0, r4
 8002230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <__sfp+0x74>)
 8002234:	6665      	str	r5, [r4, #100]	; 0x64
 8002236:	e9c4 5500 	strd	r5, r5, [r4]
 800223a:	60a5      	str	r5, [r4, #8]
 800223c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002240:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002244:	2208      	movs	r2, #8
 8002246:	4629      	mov	r1, r5
 8002248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800224c:	f7ff fbfc 	bl	8001a48 <memset>
 8002250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002258:	e7e9      	b.n	800222e <__sfp+0x42>
 800225a:	bf00      	nop
 800225c:	08002acc 	.word	0x08002acc
 8002260:	ffff0001 	.word	0xffff0001

08002264 <_fwalk_reent>:
 8002264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002268:	4680      	mov	r8, r0
 800226a:	4689      	mov	r9, r1
 800226c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002270:	2600      	movs	r6, #0
 8002272:	b914      	cbnz	r4, 800227a <_fwalk_reent+0x16>
 8002274:	4630      	mov	r0, r6
 8002276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800227a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800227e:	3f01      	subs	r7, #1
 8002280:	d501      	bpl.n	8002286 <_fwalk_reent+0x22>
 8002282:	6824      	ldr	r4, [r4, #0]
 8002284:	e7f5      	b.n	8002272 <_fwalk_reent+0xe>
 8002286:	89ab      	ldrh	r3, [r5, #12]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d907      	bls.n	800229c <_fwalk_reent+0x38>
 800228c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002290:	3301      	adds	r3, #1
 8002292:	d003      	beq.n	800229c <_fwalk_reent+0x38>
 8002294:	4629      	mov	r1, r5
 8002296:	4640      	mov	r0, r8
 8002298:	47c8      	blx	r9
 800229a:	4306      	orrs	r6, r0
 800229c:	3568      	adds	r5, #104	; 0x68
 800229e:	e7ee      	b.n	800227e <_fwalk_reent+0x1a>

080022a0 <__swhatbuf_r>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	460e      	mov	r6, r1
 80022a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a8:	2900      	cmp	r1, #0
 80022aa:	b096      	sub	sp, #88	; 0x58
 80022ac:	4614      	mov	r4, r2
 80022ae:	461d      	mov	r5, r3
 80022b0:	da07      	bge.n	80022c2 <__swhatbuf_r+0x22>
 80022b2:	2300      	movs	r3, #0
 80022b4:	602b      	str	r3, [r5, #0]
 80022b6:	89b3      	ldrh	r3, [r6, #12]
 80022b8:	061a      	lsls	r2, r3, #24
 80022ba:	d410      	bmi.n	80022de <__swhatbuf_r+0x3e>
 80022bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c0:	e00e      	b.n	80022e0 <__swhatbuf_r+0x40>
 80022c2:	466a      	mov	r2, sp
 80022c4:	f000 fb6e 	bl	80029a4 <_fstat_r>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	dbf2      	blt.n	80022b2 <__swhatbuf_r+0x12>
 80022cc:	9a01      	ldr	r2, [sp, #4]
 80022ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80022d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80022d6:	425a      	negs	r2, r3
 80022d8:	415a      	adcs	r2, r3
 80022da:	602a      	str	r2, [r5, #0]
 80022dc:	e7ee      	b.n	80022bc <__swhatbuf_r+0x1c>
 80022de:	2340      	movs	r3, #64	; 0x40
 80022e0:	2000      	movs	r0, #0
 80022e2:	6023      	str	r3, [r4, #0]
 80022e4:	b016      	add	sp, #88	; 0x58
 80022e6:	bd70      	pop	{r4, r5, r6, pc}

080022e8 <__smakebuf_r>:
 80022e8:	898b      	ldrh	r3, [r1, #12]
 80022ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022ec:	079d      	lsls	r5, r3, #30
 80022ee:	4606      	mov	r6, r0
 80022f0:	460c      	mov	r4, r1
 80022f2:	d507      	bpl.n	8002304 <__smakebuf_r+0x1c>
 80022f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022f8:	6023      	str	r3, [r4, #0]
 80022fa:	6123      	str	r3, [r4, #16]
 80022fc:	2301      	movs	r3, #1
 80022fe:	6163      	str	r3, [r4, #20]
 8002300:	b002      	add	sp, #8
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	ab01      	add	r3, sp, #4
 8002306:	466a      	mov	r2, sp
 8002308:	f7ff ffca 	bl	80022a0 <__swhatbuf_r>
 800230c:	9900      	ldr	r1, [sp, #0]
 800230e:	4605      	mov	r5, r0
 8002310:	4630      	mov	r0, r6
 8002312:	f7ff fbef 	bl	8001af4 <_malloc_r>
 8002316:	b948      	cbnz	r0, 800232c <__smakebuf_r+0x44>
 8002318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800231c:	059a      	lsls	r2, r3, #22
 800231e:	d4ef      	bmi.n	8002300 <__smakebuf_r+0x18>
 8002320:	f023 0303 	bic.w	r3, r3, #3
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	81a3      	strh	r3, [r4, #12]
 800232a:	e7e3      	b.n	80022f4 <__smakebuf_r+0xc>
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <__smakebuf_r+0x7c>)
 800232e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002330:	89a3      	ldrh	r3, [r4, #12]
 8002332:	6020      	str	r0, [r4, #0]
 8002334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002338:	81a3      	strh	r3, [r4, #12]
 800233a:	9b00      	ldr	r3, [sp, #0]
 800233c:	6163      	str	r3, [r4, #20]
 800233e:	9b01      	ldr	r3, [sp, #4]
 8002340:	6120      	str	r0, [r4, #16]
 8002342:	b15b      	cbz	r3, 800235c <__smakebuf_r+0x74>
 8002344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002348:	4630      	mov	r0, r6
 800234a:	f000 fb3d 	bl	80029c8 <_isatty_r>
 800234e:	b128      	cbz	r0, 800235c <__smakebuf_r+0x74>
 8002350:	89a3      	ldrh	r3, [r4, #12]
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	81a3      	strh	r3, [r4, #12]
 800235c:	89a3      	ldrh	r3, [r4, #12]
 800235e:	431d      	orrs	r5, r3
 8002360:	81a5      	strh	r5, [r4, #12]
 8002362:	e7cd      	b.n	8002300 <__smakebuf_r+0x18>
 8002364:	08002155 	.word	0x08002155

08002368 <__malloc_lock>:
 8002368:	4770      	bx	lr

0800236a <__malloc_unlock>:
 800236a:	4770      	bx	lr

0800236c <__sfputc_r>:
 800236c:	6893      	ldr	r3, [r2, #8]
 800236e:	3b01      	subs	r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	b410      	push	{r4}
 8002374:	6093      	str	r3, [r2, #8]
 8002376:	da08      	bge.n	800238a <__sfputc_r+0x1e>
 8002378:	6994      	ldr	r4, [r2, #24]
 800237a:	42a3      	cmp	r3, r4
 800237c:	db01      	blt.n	8002382 <__sfputc_r+0x16>
 800237e:	290a      	cmp	r1, #10
 8002380:	d103      	bne.n	800238a <__sfputc_r+0x1e>
 8002382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002386:	f7ff bd51 	b.w	8001e2c <__swbuf_r>
 800238a:	6813      	ldr	r3, [r2, #0]
 800238c:	1c58      	adds	r0, r3, #1
 800238e:	6010      	str	r0, [r2, #0]
 8002390:	7019      	strb	r1, [r3, #0]
 8002392:	4608      	mov	r0, r1
 8002394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002398:	4770      	bx	lr

0800239a <__sfputs_r>:
 800239a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239c:	4606      	mov	r6, r0
 800239e:	460f      	mov	r7, r1
 80023a0:	4614      	mov	r4, r2
 80023a2:	18d5      	adds	r5, r2, r3
 80023a4:	42ac      	cmp	r4, r5
 80023a6:	d101      	bne.n	80023ac <__sfputs_r+0x12>
 80023a8:	2000      	movs	r0, #0
 80023aa:	e007      	b.n	80023bc <__sfputs_r+0x22>
 80023ac:	463a      	mov	r2, r7
 80023ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023b2:	4630      	mov	r0, r6
 80023b4:	f7ff ffda 	bl	800236c <__sfputc_r>
 80023b8:	1c43      	adds	r3, r0, #1
 80023ba:	d1f3      	bne.n	80023a4 <__sfputs_r+0xa>
 80023bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080023c0 <_vfiprintf_r>:
 80023c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c4:	460c      	mov	r4, r1
 80023c6:	b09d      	sub	sp, #116	; 0x74
 80023c8:	4617      	mov	r7, r2
 80023ca:	461d      	mov	r5, r3
 80023cc:	4606      	mov	r6, r0
 80023ce:	b118      	cbz	r0, 80023d8 <_vfiprintf_r+0x18>
 80023d0:	6983      	ldr	r3, [r0, #24]
 80023d2:	b90b      	cbnz	r3, 80023d8 <_vfiprintf_r+0x18>
 80023d4:	f7ff feda 	bl	800218c <__sinit>
 80023d8:	4b7c      	ldr	r3, [pc, #496]	; (80025cc <_vfiprintf_r+0x20c>)
 80023da:	429c      	cmp	r4, r3
 80023dc:	d158      	bne.n	8002490 <_vfiprintf_r+0xd0>
 80023de:	6874      	ldr	r4, [r6, #4]
 80023e0:	89a3      	ldrh	r3, [r4, #12]
 80023e2:	0718      	lsls	r0, r3, #28
 80023e4:	d55e      	bpl.n	80024a4 <_vfiprintf_r+0xe4>
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05b      	beq.n	80024a4 <_vfiprintf_r+0xe4>
 80023ec:	2300      	movs	r3, #0
 80023ee:	9309      	str	r3, [sp, #36]	; 0x24
 80023f0:	2320      	movs	r3, #32
 80023f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023f6:	2330      	movs	r3, #48	; 0x30
 80023f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023fc:	9503      	str	r5, [sp, #12]
 80023fe:	f04f 0b01 	mov.w	fp, #1
 8002402:	46b8      	mov	r8, r7
 8002404:	4645      	mov	r5, r8
 8002406:	f815 3b01 	ldrb.w	r3, [r5], #1
 800240a:	b10b      	cbz	r3, 8002410 <_vfiprintf_r+0x50>
 800240c:	2b25      	cmp	r3, #37	; 0x25
 800240e:	d154      	bne.n	80024ba <_vfiprintf_r+0xfa>
 8002410:	ebb8 0a07 	subs.w	sl, r8, r7
 8002414:	d00b      	beq.n	800242e <_vfiprintf_r+0x6e>
 8002416:	4653      	mov	r3, sl
 8002418:	463a      	mov	r2, r7
 800241a:	4621      	mov	r1, r4
 800241c:	4630      	mov	r0, r6
 800241e:	f7ff ffbc 	bl	800239a <__sfputs_r>
 8002422:	3001      	adds	r0, #1
 8002424:	f000 80c2 	beq.w	80025ac <_vfiprintf_r+0x1ec>
 8002428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800242a:	4453      	add	r3, sl
 800242c:	9309      	str	r3, [sp, #36]	; 0x24
 800242e:	f898 3000 	ldrb.w	r3, [r8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80ba 	beq.w	80025ac <_vfiprintf_r+0x1ec>
 8002438:	2300      	movs	r3, #0
 800243a:	f04f 32ff 	mov.w	r2, #4294967295
 800243e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002442:	9304      	str	r3, [sp, #16]
 8002444:	9307      	str	r3, [sp, #28]
 8002446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800244a:	931a      	str	r3, [sp, #104]	; 0x68
 800244c:	46a8      	mov	r8, r5
 800244e:	2205      	movs	r2, #5
 8002450:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002454:	485e      	ldr	r0, [pc, #376]	; (80025d0 <_vfiprintf_r+0x210>)
 8002456:	f7fd febb 	bl	80001d0 <memchr>
 800245a:	9b04      	ldr	r3, [sp, #16]
 800245c:	bb78      	cbnz	r0, 80024be <_vfiprintf_r+0xfe>
 800245e:	06d9      	lsls	r1, r3, #27
 8002460:	bf44      	itt	mi
 8002462:	2220      	movmi	r2, #32
 8002464:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002468:	071a      	lsls	r2, r3, #28
 800246a:	bf44      	itt	mi
 800246c:	222b      	movmi	r2, #43	; 0x2b
 800246e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002472:	782a      	ldrb	r2, [r5, #0]
 8002474:	2a2a      	cmp	r2, #42	; 0x2a
 8002476:	d02a      	beq.n	80024ce <_vfiprintf_r+0x10e>
 8002478:	9a07      	ldr	r2, [sp, #28]
 800247a:	46a8      	mov	r8, r5
 800247c:	2000      	movs	r0, #0
 800247e:	250a      	movs	r5, #10
 8002480:	4641      	mov	r1, r8
 8002482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002486:	3b30      	subs	r3, #48	; 0x30
 8002488:	2b09      	cmp	r3, #9
 800248a:	d969      	bls.n	8002560 <_vfiprintf_r+0x1a0>
 800248c:	b360      	cbz	r0, 80024e8 <_vfiprintf_r+0x128>
 800248e:	e024      	b.n	80024da <_vfiprintf_r+0x11a>
 8002490:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <_vfiprintf_r+0x214>)
 8002492:	429c      	cmp	r4, r3
 8002494:	d101      	bne.n	800249a <_vfiprintf_r+0xda>
 8002496:	68b4      	ldr	r4, [r6, #8]
 8002498:	e7a2      	b.n	80023e0 <_vfiprintf_r+0x20>
 800249a:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <_vfiprintf_r+0x218>)
 800249c:	429c      	cmp	r4, r3
 800249e:	bf08      	it	eq
 80024a0:	68f4      	ldreq	r4, [r6, #12]
 80024a2:	e79d      	b.n	80023e0 <_vfiprintf_r+0x20>
 80024a4:	4621      	mov	r1, r4
 80024a6:	4630      	mov	r0, r6
 80024a8:	f7ff fd12 	bl	8001ed0 <__swsetup_r>
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d09d      	beq.n	80023ec <_vfiprintf_r+0x2c>
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	b01d      	add	sp, #116	; 0x74
 80024b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ba:	46a8      	mov	r8, r5
 80024bc:	e7a2      	b.n	8002404 <_vfiprintf_r+0x44>
 80024be:	4a44      	ldr	r2, [pc, #272]	; (80025d0 <_vfiprintf_r+0x210>)
 80024c0:	1a80      	subs	r0, r0, r2
 80024c2:	fa0b f000 	lsl.w	r0, fp, r0
 80024c6:	4318      	orrs	r0, r3
 80024c8:	9004      	str	r0, [sp, #16]
 80024ca:	4645      	mov	r5, r8
 80024cc:	e7be      	b.n	800244c <_vfiprintf_r+0x8c>
 80024ce:	9a03      	ldr	r2, [sp, #12]
 80024d0:	1d11      	adds	r1, r2, #4
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	9103      	str	r1, [sp, #12]
 80024d6:	2a00      	cmp	r2, #0
 80024d8:	db01      	blt.n	80024de <_vfiprintf_r+0x11e>
 80024da:	9207      	str	r2, [sp, #28]
 80024dc:	e004      	b.n	80024e8 <_vfiprintf_r+0x128>
 80024de:	4252      	negs	r2, r2
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	9207      	str	r2, [sp, #28]
 80024e6:	9304      	str	r3, [sp, #16]
 80024e8:	f898 3000 	ldrb.w	r3, [r8]
 80024ec:	2b2e      	cmp	r3, #46	; 0x2e
 80024ee:	d10e      	bne.n	800250e <_vfiprintf_r+0x14e>
 80024f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80024f4:	2b2a      	cmp	r3, #42	; 0x2a
 80024f6:	d138      	bne.n	800256a <_vfiprintf_r+0x1aa>
 80024f8:	9b03      	ldr	r3, [sp, #12]
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	9203      	str	r2, [sp, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	bfb8      	it	lt
 8002504:	f04f 33ff 	movlt.w	r3, #4294967295
 8002508:	f108 0802 	add.w	r8, r8, #2
 800250c:	9305      	str	r3, [sp, #20]
 800250e:	4d33      	ldr	r5, [pc, #204]	; (80025dc <_vfiprintf_r+0x21c>)
 8002510:	f898 1000 	ldrb.w	r1, [r8]
 8002514:	2203      	movs	r2, #3
 8002516:	4628      	mov	r0, r5
 8002518:	f7fd fe5a 	bl	80001d0 <memchr>
 800251c:	b140      	cbz	r0, 8002530 <_vfiprintf_r+0x170>
 800251e:	2340      	movs	r3, #64	; 0x40
 8002520:	1b40      	subs	r0, r0, r5
 8002522:	fa03 f000 	lsl.w	r0, r3, r0
 8002526:	9b04      	ldr	r3, [sp, #16]
 8002528:	4303      	orrs	r3, r0
 800252a:	f108 0801 	add.w	r8, r8, #1
 800252e:	9304      	str	r3, [sp, #16]
 8002530:	f898 1000 	ldrb.w	r1, [r8]
 8002534:	482a      	ldr	r0, [pc, #168]	; (80025e0 <_vfiprintf_r+0x220>)
 8002536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800253a:	2206      	movs	r2, #6
 800253c:	f108 0701 	add.w	r7, r8, #1
 8002540:	f7fd fe46 	bl	80001d0 <memchr>
 8002544:	2800      	cmp	r0, #0
 8002546:	d037      	beq.n	80025b8 <_vfiprintf_r+0x1f8>
 8002548:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <_vfiprintf_r+0x224>)
 800254a:	bb1b      	cbnz	r3, 8002594 <_vfiprintf_r+0x1d4>
 800254c:	9b03      	ldr	r3, [sp, #12]
 800254e:	3307      	adds	r3, #7
 8002550:	f023 0307 	bic.w	r3, r3, #7
 8002554:	3308      	adds	r3, #8
 8002556:	9303      	str	r3, [sp, #12]
 8002558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800255a:	444b      	add	r3, r9
 800255c:	9309      	str	r3, [sp, #36]	; 0x24
 800255e:	e750      	b.n	8002402 <_vfiprintf_r+0x42>
 8002560:	fb05 3202 	mla	r2, r5, r2, r3
 8002564:	2001      	movs	r0, #1
 8002566:	4688      	mov	r8, r1
 8002568:	e78a      	b.n	8002480 <_vfiprintf_r+0xc0>
 800256a:	2300      	movs	r3, #0
 800256c:	f108 0801 	add.w	r8, r8, #1
 8002570:	9305      	str	r3, [sp, #20]
 8002572:	4619      	mov	r1, r3
 8002574:	250a      	movs	r5, #10
 8002576:	4640      	mov	r0, r8
 8002578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800257c:	3a30      	subs	r2, #48	; 0x30
 800257e:	2a09      	cmp	r2, #9
 8002580:	d903      	bls.n	800258a <_vfiprintf_r+0x1ca>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0c3      	beq.n	800250e <_vfiprintf_r+0x14e>
 8002586:	9105      	str	r1, [sp, #20]
 8002588:	e7c1      	b.n	800250e <_vfiprintf_r+0x14e>
 800258a:	fb05 2101 	mla	r1, r5, r1, r2
 800258e:	2301      	movs	r3, #1
 8002590:	4680      	mov	r8, r0
 8002592:	e7f0      	b.n	8002576 <_vfiprintf_r+0x1b6>
 8002594:	ab03      	add	r3, sp, #12
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4622      	mov	r2, r4
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <_vfiprintf_r+0x228>)
 800259c:	a904      	add	r1, sp, #16
 800259e:	4630      	mov	r0, r6
 80025a0:	f3af 8000 	nop.w
 80025a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80025a8:	4681      	mov	r9, r0
 80025aa:	d1d5      	bne.n	8002558 <_vfiprintf_r+0x198>
 80025ac:	89a3      	ldrh	r3, [r4, #12]
 80025ae:	065b      	lsls	r3, r3, #25
 80025b0:	f53f af7e 	bmi.w	80024b0 <_vfiprintf_r+0xf0>
 80025b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025b6:	e77d      	b.n	80024b4 <_vfiprintf_r+0xf4>
 80025b8:	ab03      	add	r3, sp, #12
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4622      	mov	r2, r4
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <_vfiprintf_r+0x228>)
 80025c0:	a904      	add	r1, sp, #16
 80025c2:	4630      	mov	r0, r6
 80025c4:	f000 f888 	bl	80026d8 <_printf_i>
 80025c8:	e7ec      	b.n	80025a4 <_vfiprintf_r+0x1e4>
 80025ca:	bf00      	nop
 80025cc:	08002af0 	.word	0x08002af0
 80025d0:	08002b30 	.word	0x08002b30
 80025d4:	08002b10 	.word	0x08002b10
 80025d8:	08002ad0 	.word	0x08002ad0
 80025dc:	08002b36 	.word	0x08002b36
 80025e0:	08002b3a 	.word	0x08002b3a
 80025e4:	00000000 	.word	0x00000000
 80025e8:	0800239b 	.word	0x0800239b

080025ec <_printf_common>:
 80025ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025f0:	4691      	mov	r9, r2
 80025f2:	461f      	mov	r7, r3
 80025f4:	688a      	ldr	r2, [r1, #8]
 80025f6:	690b      	ldr	r3, [r1, #16]
 80025f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bfb8      	it	lt
 8002600:	4613      	movlt	r3, r2
 8002602:	f8c9 3000 	str.w	r3, [r9]
 8002606:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800260a:	4606      	mov	r6, r0
 800260c:	460c      	mov	r4, r1
 800260e:	b112      	cbz	r2, 8002616 <_printf_common+0x2a>
 8002610:	3301      	adds	r3, #1
 8002612:	f8c9 3000 	str.w	r3, [r9]
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	0699      	lsls	r1, r3, #26
 800261a:	bf42      	ittt	mi
 800261c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002620:	3302      	addmi	r3, #2
 8002622:	f8c9 3000 	strmi.w	r3, [r9]
 8002626:	6825      	ldr	r5, [r4, #0]
 8002628:	f015 0506 	ands.w	r5, r5, #6
 800262c:	d107      	bne.n	800263e <_printf_common+0x52>
 800262e:	f104 0a19 	add.w	sl, r4, #25
 8002632:	68e3      	ldr	r3, [r4, #12]
 8002634:	f8d9 2000 	ldr.w	r2, [r9]
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	42ab      	cmp	r3, r5
 800263c:	dc28      	bgt.n	8002690 <_printf_common+0xa4>
 800263e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	3300      	adds	r3, #0
 8002646:	bf18      	it	ne
 8002648:	2301      	movne	r3, #1
 800264a:	0692      	lsls	r2, r2, #26
 800264c:	d42d      	bmi.n	80026aa <_printf_common+0xbe>
 800264e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002652:	4639      	mov	r1, r7
 8002654:	4630      	mov	r0, r6
 8002656:	47c0      	blx	r8
 8002658:	3001      	adds	r0, #1
 800265a:	d020      	beq.n	800269e <_printf_common+0xb2>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	68e5      	ldr	r5, [r4, #12]
 8002660:	f8d9 2000 	ldr.w	r2, [r9]
 8002664:	f003 0306 	and.w	r3, r3, #6
 8002668:	2b04      	cmp	r3, #4
 800266a:	bf08      	it	eq
 800266c:	1aad      	subeq	r5, r5, r2
 800266e:	68a3      	ldr	r3, [r4, #8]
 8002670:	6922      	ldr	r2, [r4, #16]
 8002672:	bf0c      	ite	eq
 8002674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002678:	2500      	movne	r5, #0
 800267a:	4293      	cmp	r3, r2
 800267c:	bfc4      	itt	gt
 800267e:	1a9b      	subgt	r3, r3, r2
 8002680:	18ed      	addgt	r5, r5, r3
 8002682:	f04f 0900 	mov.w	r9, #0
 8002686:	341a      	adds	r4, #26
 8002688:	454d      	cmp	r5, r9
 800268a:	d11a      	bne.n	80026c2 <_printf_common+0xd6>
 800268c:	2000      	movs	r0, #0
 800268e:	e008      	b.n	80026a2 <_printf_common+0xb6>
 8002690:	2301      	movs	r3, #1
 8002692:	4652      	mov	r2, sl
 8002694:	4639      	mov	r1, r7
 8002696:	4630      	mov	r0, r6
 8002698:	47c0      	blx	r8
 800269a:	3001      	adds	r0, #1
 800269c:	d103      	bne.n	80026a6 <_printf_common+0xba>
 800269e:	f04f 30ff 	mov.w	r0, #4294967295
 80026a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a6:	3501      	adds	r5, #1
 80026a8:	e7c3      	b.n	8002632 <_printf_common+0x46>
 80026aa:	18e1      	adds	r1, r4, r3
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	2030      	movs	r0, #48	; 0x30
 80026b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026b4:	4422      	add	r2, r4
 80026b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026be:	3302      	adds	r3, #2
 80026c0:	e7c5      	b.n	800264e <_printf_common+0x62>
 80026c2:	2301      	movs	r3, #1
 80026c4:	4622      	mov	r2, r4
 80026c6:	4639      	mov	r1, r7
 80026c8:	4630      	mov	r0, r6
 80026ca:	47c0      	blx	r8
 80026cc:	3001      	adds	r0, #1
 80026ce:	d0e6      	beq.n	800269e <_printf_common+0xb2>
 80026d0:	f109 0901 	add.w	r9, r9, #1
 80026d4:	e7d8      	b.n	8002688 <_printf_common+0x9c>
	...

080026d8 <_printf_i>:
 80026d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80026e0:	460c      	mov	r4, r1
 80026e2:	7e09      	ldrb	r1, [r1, #24]
 80026e4:	b085      	sub	sp, #20
 80026e6:	296e      	cmp	r1, #110	; 0x6e
 80026e8:	4617      	mov	r7, r2
 80026ea:	4606      	mov	r6, r0
 80026ec:	4698      	mov	r8, r3
 80026ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80026f0:	f000 80b3 	beq.w	800285a <_printf_i+0x182>
 80026f4:	d822      	bhi.n	800273c <_printf_i+0x64>
 80026f6:	2963      	cmp	r1, #99	; 0x63
 80026f8:	d036      	beq.n	8002768 <_printf_i+0x90>
 80026fa:	d80a      	bhi.n	8002712 <_printf_i+0x3a>
 80026fc:	2900      	cmp	r1, #0
 80026fe:	f000 80b9 	beq.w	8002874 <_printf_i+0x19c>
 8002702:	2958      	cmp	r1, #88	; 0x58
 8002704:	f000 8083 	beq.w	800280e <_printf_i+0x136>
 8002708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800270c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002710:	e032      	b.n	8002778 <_printf_i+0xa0>
 8002712:	2964      	cmp	r1, #100	; 0x64
 8002714:	d001      	beq.n	800271a <_printf_i+0x42>
 8002716:	2969      	cmp	r1, #105	; 0x69
 8002718:	d1f6      	bne.n	8002708 <_printf_i+0x30>
 800271a:	6820      	ldr	r0, [r4, #0]
 800271c:	6813      	ldr	r3, [r2, #0]
 800271e:	0605      	lsls	r5, r0, #24
 8002720:	f103 0104 	add.w	r1, r3, #4
 8002724:	d52a      	bpl.n	800277c <_printf_i+0xa4>
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6011      	str	r1, [r2, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	da03      	bge.n	8002736 <_printf_i+0x5e>
 800272e:	222d      	movs	r2, #45	; 0x2d
 8002730:	425b      	negs	r3, r3
 8002732:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002736:	486f      	ldr	r0, [pc, #444]	; (80028f4 <_printf_i+0x21c>)
 8002738:	220a      	movs	r2, #10
 800273a:	e039      	b.n	80027b0 <_printf_i+0xd8>
 800273c:	2973      	cmp	r1, #115	; 0x73
 800273e:	f000 809d 	beq.w	800287c <_printf_i+0x1a4>
 8002742:	d808      	bhi.n	8002756 <_printf_i+0x7e>
 8002744:	296f      	cmp	r1, #111	; 0x6f
 8002746:	d020      	beq.n	800278a <_printf_i+0xb2>
 8002748:	2970      	cmp	r1, #112	; 0x70
 800274a:	d1dd      	bne.n	8002708 <_printf_i+0x30>
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	f043 0320 	orr.w	r3, r3, #32
 8002752:	6023      	str	r3, [r4, #0]
 8002754:	e003      	b.n	800275e <_printf_i+0x86>
 8002756:	2975      	cmp	r1, #117	; 0x75
 8002758:	d017      	beq.n	800278a <_printf_i+0xb2>
 800275a:	2978      	cmp	r1, #120	; 0x78
 800275c:	d1d4      	bne.n	8002708 <_printf_i+0x30>
 800275e:	2378      	movs	r3, #120	; 0x78
 8002760:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002764:	4864      	ldr	r0, [pc, #400]	; (80028f8 <_printf_i+0x220>)
 8002766:	e055      	b.n	8002814 <_printf_i+0x13c>
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	1d19      	adds	r1, r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6011      	str	r1, [r2, #0]
 8002770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002778:	2301      	movs	r3, #1
 800277a:	e08c      	b.n	8002896 <_printf_i+0x1be>
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6011      	str	r1, [r2, #0]
 8002780:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002784:	bf18      	it	ne
 8002786:	b21b      	sxthne	r3, r3
 8002788:	e7cf      	b.n	800272a <_printf_i+0x52>
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	6825      	ldr	r5, [r4, #0]
 800278e:	1d18      	adds	r0, r3, #4
 8002790:	6010      	str	r0, [r2, #0]
 8002792:	0628      	lsls	r0, r5, #24
 8002794:	d501      	bpl.n	800279a <_printf_i+0xc2>
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	e002      	b.n	80027a0 <_printf_i+0xc8>
 800279a:	0668      	lsls	r0, r5, #25
 800279c:	d5fb      	bpl.n	8002796 <_printf_i+0xbe>
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	4854      	ldr	r0, [pc, #336]	; (80028f4 <_printf_i+0x21c>)
 80027a2:	296f      	cmp	r1, #111	; 0x6f
 80027a4:	bf14      	ite	ne
 80027a6:	220a      	movne	r2, #10
 80027a8:	2208      	moveq	r2, #8
 80027aa:	2100      	movs	r1, #0
 80027ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027b0:	6865      	ldr	r5, [r4, #4]
 80027b2:	60a5      	str	r5, [r4, #8]
 80027b4:	2d00      	cmp	r5, #0
 80027b6:	f2c0 8095 	blt.w	80028e4 <_printf_i+0x20c>
 80027ba:	6821      	ldr	r1, [r4, #0]
 80027bc:	f021 0104 	bic.w	r1, r1, #4
 80027c0:	6021      	str	r1, [r4, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d13d      	bne.n	8002842 <_printf_i+0x16a>
 80027c6:	2d00      	cmp	r5, #0
 80027c8:	f040 808e 	bne.w	80028e8 <_printf_i+0x210>
 80027cc:	4665      	mov	r5, ip
 80027ce:	2a08      	cmp	r2, #8
 80027d0:	d10b      	bne.n	80027ea <_printf_i+0x112>
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	07db      	lsls	r3, r3, #31
 80027d6:	d508      	bpl.n	80027ea <_printf_i+0x112>
 80027d8:	6923      	ldr	r3, [r4, #16]
 80027da:	6862      	ldr	r2, [r4, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	bfde      	ittt	le
 80027e0:	2330      	movle	r3, #48	; 0x30
 80027e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027ea:	ebac 0305 	sub.w	r3, ip, r5
 80027ee:	6123      	str	r3, [r4, #16]
 80027f0:	f8cd 8000 	str.w	r8, [sp]
 80027f4:	463b      	mov	r3, r7
 80027f6:	aa03      	add	r2, sp, #12
 80027f8:	4621      	mov	r1, r4
 80027fa:	4630      	mov	r0, r6
 80027fc:	f7ff fef6 	bl	80025ec <_printf_common>
 8002800:	3001      	adds	r0, #1
 8002802:	d14d      	bne.n	80028a0 <_printf_i+0x1c8>
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	b005      	add	sp, #20
 800280a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800280e:	4839      	ldr	r0, [pc, #228]	; (80028f4 <_printf_i+0x21c>)
 8002810:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002814:	6813      	ldr	r3, [r2, #0]
 8002816:	6821      	ldr	r1, [r4, #0]
 8002818:	1d1d      	adds	r5, r3, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6015      	str	r5, [r2, #0]
 800281e:	060a      	lsls	r2, r1, #24
 8002820:	d50b      	bpl.n	800283a <_printf_i+0x162>
 8002822:	07ca      	lsls	r2, r1, #31
 8002824:	bf44      	itt	mi
 8002826:	f041 0120 	orrmi.w	r1, r1, #32
 800282a:	6021      	strmi	r1, [r4, #0]
 800282c:	b91b      	cbnz	r3, 8002836 <_printf_i+0x15e>
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	f022 0220 	bic.w	r2, r2, #32
 8002834:	6022      	str	r2, [r4, #0]
 8002836:	2210      	movs	r2, #16
 8002838:	e7b7      	b.n	80027aa <_printf_i+0xd2>
 800283a:	064d      	lsls	r5, r1, #25
 800283c:	bf48      	it	mi
 800283e:	b29b      	uxthmi	r3, r3
 8002840:	e7ef      	b.n	8002822 <_printf_i+0x14a>
 8002842:	4665      	mov	r5, ip
 8002844:	fbb3 f1f2 	udiv	r1, r3, r2
 8002848:	fb02 3311 	mls	r3, r2, r1, r3
 800284c:	5cc3      	ldrb	r3, [r0, r3]
 800284e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002852:	460b      	mov	r3, r1
 8002854:	2900      	cmp	r1, #0
 8002856:	d1f5      	bne.n	8002844 <_printf_i+0x16c>
 8002858:	e7b9      	b.n	80027ce <_printf_i+0xf6>
 800285a:	6813      	ldr	r3, [r2, #0]
 800285c:	6825      	ldr	r5, [r4, #0]
 800285e:	6961      	ldr	r1, [r4, #20]
 8002860:	1d18      	adds	r0, r3, #4
 8002862:	6010      	str	r0, [r2, #0]
 8002864:	0628      	lsls	r0, r5, #24
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	d501      	bpl.n	800286e <_printf_i+0x196>
 800286a:	6019      	str	r1, [r3, #0]
 800286c:	e002      	b.n	8002874 <_printf_i+0x19c>
 800286e:	066a      	lsls	r2, r5, #25
 8002870:	d5fb      	bpl.n	800286a <_printf_i+0x192>
 8002872:	8019      	strh	r1, [r3, #0]
 8002874:	2300      	movs	r3, #0
 8002876:	6123      	str	r3, [r4, #16]
 8002878:	4665      	mov	r5, ip
 800287a:	e7b9      	b.n	80027f0 <_printf_i+0x118>
 800287c:	6813      	ldr	r3, [r2, #0]
 800287e:	1d19      	adds	r1, r3, #4
 8002880:	6011      	str	r1, [r2, #0]
 8002882:	681d      	ldr	r5, [r3, #0]
 8002884:	6862      	ldr	r2, [r4, #4]
 8002886:	2100      	movs	r1, #0
 8002888:	4628      	mov	r0, r5
 800288a:	f7fd fca1 	bl	80001d0 <memchr>
 800288e:	b108      	cbz	r0, 8002894 <_printf_i+0x1bc>
 8002890:	1b40      	subs	r0, r0, r5
 8002892:	6060      	str	r0, [r4, #4]
 8002894:	6863      	ldr	r3, [r4, #4]
 8002896:	6123      	str	r3, [r4, #16]
 8002898:	2300      	movs	r3, #0
 800289a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800289e:	e7a7      	b.n	80027f0 <_printf_i+0x118>
 80028a0:	6923      	ldr	r3, [r4, #16]
 80028a2:	462a      	mov	r2, r5
 80028a4:	4639      	mov	r1, r7
 80028a6:	4630      	mov	r0, r6
 80028a8:	47c0      	blx	r8
 80028aa:	3001      	adds	r0, #1
 80028ac:	d0aa      	beq.n	8002804 <_printf_i+0x12c>
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	079b      	lsls	r3, r3, #30
 80028b2:	d413      	bmi.n	80028dc <_printf_i+0x204>
 80028b4:	68e0      	ldr	r0, [r4, #12]
 80028b6:	9b03      	ldr	r3, [sp, #12]
 80028b8:	4298      	cmp	r0, r3
 80028ba:	bfb8      	it	lt
 80028bc:	4618      	movlt	r0, r3
 80028be:	e7a3      	b.n	8002808 <_printf_i+0x130>
 80028c0:	2301      	movs	r3, #1
 80028c2:	464a      	mov	r2, r9
 80028c4:	4639      	mov	r1, r7
 80028c6:	4630      	mov	r0, r6
 80028c8:	47c0      	blx	r8
 80028ca:	3001      	adds	r0, #1
 80028cc:	d09a      	beq.n	8002804 <_printf_i+0x12c>
 80028ce:	3501      	adds	r5, #1
 80028d0:	68e3      	ldr	r3, [r4, #12]
 80028d2:	9a03      	ldr	r2, [sp, #12]
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	42ab      	cmp	r3, r5
 80028d8:	dcf2      	bgt.n	80028c0 <_printf_i+0x1e8>
 80028da:	e7eb      	b.n	80028b4 <_printf_i+0x1dc>
 80028dc:	2500      	movs	r5, #0
 80028de:	f104 0919 	add.w	r9, r4, #25
 80028e2:	e7f5      	b.n	80028d0 <_printf_i+0x1f8>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ac      	bne.n	8002842 <_printf_i+0x16a>
 80028e8:	7803      	ldrb	r3, [r0, #0]
 80028ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028f2:	e76c      	b.n	80027ce <_printf_i+0xf6>
 80028f4:	08002b41 	.word	0x08002b41
 80028f8:	08002b52 	.word	0x08002b52

080028fc <__sread>:
 80028fc:	b510      	push	{r4, lr}
 80028fe:	460c      	mov	r4, r1
 8002900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002904:	f000 f882 	bl	8002a0c <_read_r>
 8002908:	2800      	cmp	r0, #0
 800290a:	bfab      	itete	ge
 800290c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800290e:	89a3      	ldrhlt	r3, [r4, #12]
 8002910:	181b      	addge	r3, r3, r0
 8002912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002916:	bfac      	ite	ge
 8002918:	6563      	strge	r3, [r4, #84]	; 0x54
 800291a:	81a3      	strhlt	r3, [r4, #12]
 800291c:	bd10      	pop	{r4, pc}

0800291e <__swrite>:
 800291e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002922:	461f      	mov	r7, r3
 8002924:	898b      	ldrh	r3, [r1, #12]
 8002926:	05db      	lsls	r3, r3, #23
 8002928:	4605      	mov	r5, r0
 800292a:	460c      	mov	r4, r1
 800292c:	4616      	mov	r6, r2
 800292e:	d505      	bpl.n	800293c <__swrite+0x1e>
 8002930:	2302      	movs	r3, #2
 8002932:	2200      	movs	r2, #0
 8002934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002938:	f000 f856 	bl	80029e8 <_lseek_r>
 800293c:	89a3      	ldrh	r3, [r4, #12]
 800293e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002946:	81a3      	strh	r3, [r4, #12]
 8002948:	4632      	mov	r2, r6
 800294a:	463b      	mov	r3, r7
 800294c:	4628      	mov	r0, r5
 800294e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002952:	f7fd bfbf 	b.w	80008d4 <_write_r>

08002956 <__sseek>:
 8002956:	b510      	push	{r4, lr}
 8002958:	460c      	mov	r4, r1
 800295a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800295e:	f000 f843 	bl	80029e8 <_lseek_r>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	bf15      	itete	ne
 8002968:	6560      	strne	r0, [r4, #84]	; 0x54
 800296a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800296e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002972:	81a3      	strheq	r3, [r4, #12]
 8002974:	bf18      	it	ne
 8002976:	81a3      	strhne	r3, [r4, #12]
 8002978:	bd10      	pop	{r4, pc}

0800297a <__sclose>:
 800297a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800297e:	f000 b801 	b.w	8002984 <_close_r>
	...

08002984 <_close_r>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	4c06      	ldr	r4, [pc, #24]	; (80029a0 <_close_r+0x1c>)
 8002988:	2300      	movs	r3, #0
 800298a:	4605      	mov	r5, r0
 800298c:	4608      	mov	r0, r1
 800298e:	6023      	str	r3, [r4, #0]
 8002990:	f7fe ff0b 	bl	80017aa <_close>
 8002994:	1c43      	adds	r3, r0, #1
 8002996:	d102      	bne.n	800299e <_close_r+0x1a>
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	b103      	cbz	r3, 800299e <_close_r+0x1a>
 800299c:	602b      	str	r3, [r5, #0]
 800299e:	bd38      	pop	{r3, r4, r5, pc}
 80029a0:	200001c0 	.word	0x200001c0

080029a4 <_fstat_r>:
 80029a4:	b538      	push	{r3, r4, r5, lr}
 80029a6:	4c07      	ldr	r4, [pc, #28]	; (80029c4 <_fstat_r+0x20>)
 80029a8:	2300      	movs	r3, #0
 80029aa:	4605      	mov	r5, r0
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	6023      	str	r3, [r4, #0]
 80029b2:	f7fe ff06 	bl	80017c2 <_fstat>
 80029b6:	1c43      	adds	r3, r0, #1
 80029b8:	d102      	bne.n	80029c0 <_fstat_r+0x1c>
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	b103      	cbz	r3, 80029c0 <_fstat_r+0x1c>
 80029be:	602b      	str	r3, [r5, #0]
 80029c0:	bd38      	pop	{r3, r4, r5, pc}
 80029c2:	bf00      	nop
 80029c4:	200001c0 	.word	0x200001c0

080029c8 <_isatty_r>:
 80029c8:	b538      	push	{r3, r4, r5, lr}
 80029ca:	4c06      	ldr	r4, [pc, #24]	; (80029e4 <_isatty_r+0x1c>)
 80029cc:	2300      	movs	r3, #0
 80029ce:	4605      	mov	r5, r0
 80029d0:	4608      	mov	r0, r1
 80029d2:	6023      	str	r3, [r4, #0]
 80029d4:	f7fe ff05 	bl	80017e2 <_isatty>
 80029d8:	1c43      	adds	r3, r0, #1
 80029da:	d102      	bne.n	80029e2 <_isatty_r+0x1a>
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	b103      	cbz	r3, 80029e2 <_isatty_r+0x1a>
 80029e0:	602b      	str	r3, [r5, #0]
 80029e2:	bd38      	pop	{r3, r4, r5, pc}
 80029e4:	200001c0 	.word	0x200001c0

080029e8 <_lseek_r>:
 80029e8:	b538      	push	{r3, r4, r5, lr}
 80029ea:	4c07      	ldr	r4, [pc, #28]	; (8002a08 <_lseek_r+0x20>)
 80029ec:	4605      	mov	r5, r0
 80029ee:	4608      	mov	r0, r1
 80029f0:	4611      	mov	r1, r2
 80029f2:	2200      	movs	r2, #0
 80029f4:	6022      	str	r2, [r4, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f7fe fefe 	bl	80017f8 <_lseek>
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	d102      	bne.n	8002a06 <_lseek_r+0x1e>
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	b103      	cbz	r3, 8002a06 <_lseek_r+0x1e>
 8002a04:	602b      	str	r3, [r5, #0]
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
 8002a08:	200001c0 	.word	0x200001c0

08002a0c <_read_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	4c07      	ldr	r4, [pc, #28]	; (8002a2c <_read_r+0x20>)
 8002a10:	4605      	mov	r5, r0
 8002a12:	4608      	mov	r0, r1
 8002a14:	4611      	mov	r1, r2
 8002a16:	2200      	movs	r2, #0
 8002a18:	6022      	str	r2, [r4, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f7fe fea8 	bl	8001770 <_read>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_read_r+0x1e>
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_read_r+0x1e>
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	200001c0 	.word	0x200001c0

08002a30 <_init>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	bf00      	nop
 8002a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a36:	bc08      	pop	{r3}
 8002a38:	469e      	mov	lr, r3
 8002a3a:	4770      	bx	lr

08002a3c <_fini>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr
